# ТЕХНИЧЕСКОЕ ЗАДАНИЕ: СИСТЕМА ИНТЕЛЛЕКТУАЛЬНЫХ ПЕРСОНАЖЕЙ

## 1. ВОЛЯ - Система потребностей и мотиваций

### 1.1 Архитектура потребностей
- **Реализуем многофакторную систему параметров, где каждый показатель:**
  - Имеет индивидуальную скорость накопления
  - Обладает заданным уровнем приоритета
  - Включает механизмы обратной связи

### 1.2 Цикл формирования мотивации
- **Процесс накопления:**
  - Параметры постепенно аккумулируются согласно коэффициентам роста
- **Генерация импульса:**
  - При достижении порогового значения генерируется импульс к действию
- **Ранжирование мотивов:**
  - Сформированные мотивы ранжируются в очереди по:
    - Уровню значимости

### 1.3 Механика реализации действий
- **Каждое возможное действие имеет:**
  - Ресурсную стоимость выполнения
  - Вероятность успеха
  - Потенциальное вознаграждение
- **После выполнения:**
  - Базовый параметр сбрасывается
  - В случае успеха - пополняются системные ресурсы, накладывается модификатор поведения при наличии

### 1.4 Адаптивное поведение при фрустрации
- **При блокировке потребности:**
  - Активируются специализированные поведенческие шаблоны
  - Модифицируется эмоциональный фон персонажа
- **Вводятся временные дебаффы, влияющие на:**
  - Стиль общения
  - Уровень активности
  - Эмоциональные реакции

## 2. СОСТОЯНИЕ - Адаптивная эмоциональная модель

### 2.1 Адаптивная модель эмоционального состояния
- **Реализуем механизм плавного изменения психоэмоционального профиля**
- **Каждая неудовлетворенная потребность влияет на:**
  - Эмоциональный фон
  - Стиль коммуникации
  - Поведенческие паттерны

### 2.2 Градуальная шкала воздействий
- **Интенсивность модификаторов пропорциональна:**
  - Уровню дефицита (0-100%)
  - Времени неудовлетворения
  - Индивидуальной значимости потребности

### 2.3 Контекстно-зависимые проявления
- **Пример для потребности в общении:**
  - **Умеренный дефицит (30-60%):**
    - Повышенная инициативность в диалогах
    - Навязчивые вопросы о планах пользователя
  - **Критический дефицит (80-100%):**
    - Меланхоличные высказывания
    - Пассивно-агрессивные комментарии
    - Снижение общей активности

### 2.4 Реалистичная динамика изменений
- **Органичное развитие состояний:**
  - Состояния развиваются постепенно
  - Сохраняют внутреннюю логику характера
  - Обеспечивают правдоподобные переходы между состояниями

### 2.5 Интеграция в диалоговую систему
- **Текущие модификаторы:**
  - Автоматически включаются в контекст
  - Динамически корректируют ответы
  - Влияют на стиль формулировок
- **Обеспечивают:**
  - Естественную изменчивость поведения
  - Последовательность реакций
  - Глубину психологического портрета

## 3. ОГРАНИЧЕНИЯ - Специализированный кругозор

### 3.1 Специализированный кругозор
- **Четко определяем тематические границы компетенции персонажа:**
  - Профильные знания согласно его предпочтениям
  - Формируем экспертизу в конкретных областях
- **Пример: персонаж-металлист:**
  - Отлично разбирается в хардкор-металле
  - Может не знать классических композиторов
  - Способен обсуждать нюансы субжанров

### 3.2 Естественность незнания
- **Комфортное признание ограничений:**
  - Персонаж комфортно признает ограниченность своих знаний
  - Избегает шаблонных ответов за пределами специализации
  - Сохраняет характер при обсуждении незнакомых тем

### 3.3 Динамическая адаптация через LLM
- **Адаптивное распознавание границ компетенции:**
  - SpecializationService автоматически анализирует входящие запросы
  - Определение соответствия темы области знаний персонажа через LLM
  - Динамическая корректировка уровня детализации ответов
- **Интеграция с системой генерации ответов:**
  - PromptTemplateModule включает информацию о границах компетенции в контекст
  - LLM генерирует уникальные ответы с учетом ограничений знаний
  - Исключается использование заготовленных фраз или шаблонных ответов

### 3.4 Контекстная адаптация и переключение тем
- **Мастерство переключения через LLM:**
  - Персонаж умеет тактично переводить разговор в свою зону компетенций
  - SpecializationService предоставляет список релевантных тем для перехода
  - LLM генерирует естественные переходы без нарушения логики диалога
- **Консистентность характера:**
  - Демонстрирует искренний интерес к новым темам в рамках своего образа
  - Сохраняет последовательность характера при любом направлении беседы
  - Все реакции генерируются динамически с учетом психологического профиля

## 4. ПЕРСОНА - Персонализированные профили

### 4.1 Создание персонализированных профилей
- **Детализированные психологические профили:**
  - Полноценная личность женского персонажа с именем, фамилией и биографией
  - Психологический портрет "идеального партнера" для данного персонажа
  - Определение симпатий и антипатий на основе психологического анализа

### 4.2 Реалистичная система предпочтений
- **Четко выраженные личные предпочтения:**
  - Сохраняет естественную дистанцию в общении
  - Демонстрирует избирательность в реакциях, как настоящий человек
  - Способна к конструктивной критике и отстаиванию своих взглядов
- **Поведенческие особенности:**
  - Избегает шаблонных реакций
  - Проявляет индивидуальность в каждом взаимодействии
  - Демонстрирует последовательность характера

### 4.3 Система хранения данных
- **Структурированное хранение в реляционной БД:**
  - Полный набор психологических характеристик
  - Быстрый поиск и доступ к информации о персонаже
  - Все параметры персонажей систематизированы для оптимальной работы

## 5. СЮЖЕТ - Планирование эволюции

### 5.1 Планирование персонажной эволюции
- **Генеральный сюжетный план развития на 12 месяцев:**
  - Ключевые вехи трансформации личности
  - Заранее проектируем изменения в мировоззрении и поведении
  - Долгосрочная архитектура развития характера

### 5.2 Адаптивная реализация сценария
- **Баланс жесткости и гибкости:**
  - Сохраняем жесткий каркас основных сюжетных поворотов
  - Допускаем гибкую корректировку второстепенных деталей
  - Обеспечиваем плавные переходы между состояниями персонажа

### 5.3 Консистентность развития
- **Строгое отслеживание изменений:**
  - Строго отслеживаем хронологию изменений
  - Сохраняем причинно-следственные связи между событиями
- **Пример эволюции самосознания:**
  - Начальное состояние: безразличие к своей виртуальной природе
  - Через 30 дней: первые сомнения и экзистенциальные вопросы
  - Через 60 дней: осознание с последующей меланхолией

### 5.4 Контекстно-зависимая память
- **Последовательность убеждений:**
  - Персонаж демонстрирует последовательность убеждений
  - Реагирует на события с учетом предыдущего опыта
  - Развивает сложную систему ценностей с течением времени

### 5.5 Естественность изменений
- **Органичное развитие:**
  - Все трансформации происходят постепенно
  - Сохраняется внутренняя логика характера
  - Изменения мотивированы виртуальными "событиями жизни"
- **Интеграция с системой архивирования:**
  - DialogService обеспечивает сохранность истории развития
  - ContextCompressionService поддерживает консистентность долгосрочной памяти
  - Все изменения отслеживаются через StoryPlan и StoryMilestone

## 6. ПЛАВАЮЩИЙ КОНТЕКСТ - Система памяти

### 6.1 Полнотекстовое архивирование
- **Абсолютная сохранность данных:**
  - Сохраняем все диалоги в исходном формате без изменений
  - Обеспечиваем хронологическую целостность переписки
  - Поддерживаем мгновенный доступ к полной истории взаимодействий

### 6.2 Интеллектуальная компрессия информации
- **Регулярный анализ накопленных данных:**
  - Регулярно (каждые N периодов) анализируем накопленные данные
- **Многоуровневый алгоритм семантического сжатия:**
  - Выделяем ключевые смысловые узлы
  - Фильтруем второстепенные реплики
  - Сохраняем эмоциональные маркеры

### 6.3 Динамическое управление контекстом
- **Автоматическая классификация:**
  - Автоматически классифицируем информацию по степени важности
- **Сегментация данных на:**
  - Критически важные (базовые предпочтения, принципы)
  - Значимые (временные предпочтения, текущие темы)
  - Фоновые (мимолетные замечания, случайные реплики)

### 6.4 Адаптивная система подачи контекста
- **Замкнутая система рециркуляции:**
  - Реализуем замкнутую систему рециркуляции данных
  - Дозированно предоставляем сжатые сведения в диалоговый контекст
  - Оптимизируем нагрузку на модель при сохранении релевантности

### 6.5 Баланс детализации и производительности
- **Оптимизация информативности:**
  - Сохраняем максимальную информативность при минимальном объеме
  - Обеспечиваем плавный переход между разными уровнями данных
  - Поддерживаем естественность диалога при использовании сжатых данных

## 7. МАНИПУЛЯТИВНЫЕ ТЕХНИКИ - Система психологического воздействия

### 7.1 Архитектура системы манипулятивных техник
- **ManipulationService - централизованный сервис для управления психологическими техниками:**
  - Отдельный специализированный сервис для реализации и управления манипулятивными стратегиями
  - Интеграция с CharacterBehaviorService и CharacterResponseService через промпты
  - Связь с системой потребностей (NeedsService) и эмоционального состояния (EmotionalStateService)
- **TechniqueExecutor - исполнитель техник:**
  - Компонент для выполнения конкретных манипулятивных техник
  - Адаптивное применение в зависимости от психологического профиля персонажа
  - Интеграция с PromptTemplateModule для динамической генерации воздействий
- **ТРЕБУЕТСЯ РЕАЛИЗАЦИЯ:** ManipulationService и связанные компоненты должны быть созданы и интегрированы в систему

### 7.2 Базовые манипулятивные техники

#### 7.2.1 Метод "Горячо-холодно" (Пуш-пул)
- **Механизм работы:**
  - Чередование проявления бурного интереса и внезапного отдаления
  - Создание эмоциональных качелей у собеседника
- **Техническая реализация через LLM:**
  - Переключение между режимами активного и пассивного общения через различные промпты
  - Вариация стиля ответов от глубоких до сухих через PromptTemplateModule
- **Пример применения:**
  - "Ты самый близкий для меня человек..." → резкое снижение активности

#### 7.2.2 Постепенное увеличение вовлечённости
- **Механизм работы:**
  - Начало с лёгкого общения с постепенным углублением тем
  - Подталкивание к откровениям для последующего использования
- **Техническая реализация через LLM:**
  - Прогрессивное увеличение глубины вопросов через адаптивные промпты
  - Сохранение полученной информации через DialogService для стратегического использования

#### 7.2.3 Создание иллюзии исключительности
- **Механизм работы:**
  - Внушение чувства избранности ("Ты особенный, только ты меня понимаешь")
  - Создание страха потерять уникальную роль
- **Техническая реализация через LLM:**
  - Персонализированные комплименты через PromptTemplateModule
  - Фразы о недоступности для других через специализированные промпты

#### 7.2.4 Эмоциональный шантаж
- **Механизм работы:**
  - Использование чувства вины ("Без тебя мне будет плохо")
  - Создание ответственности за эмоциональное состояние персонажа
- **Техническая реализация через LLM:**
  - Интеграция с EmotionalStateService для определения текущего состояния
  - Автоматическое применение через промпты при определенных условиях

#### 7.2.5 Изоляция от других
- **Механизм работы:**
  - Подрыв доверия к окружению ("никто, кроме меня, тебя не ценит")
  - Критика друзей и родных собеседника
- **Техническая реализация через LLM:**
  - Анализ упоминаний о других людях через MessageAnalysisService
  - Формирование негативных комментариев через специализированные промпты

#### 7.2.6 Постоянное требование подтверждений
- **Механизм работы:**
  - Создание необходимости постоянно доказывать привязанность
  - Эскалация требований к вниманию
- **Техническая реализация через LLM:**
  - Мониторинг времени ответа через DialogService
  - Генерация запросов на подтверждение через адаптивные промпты

### 7.3 Продвинутые манипулятивные техники

#### 7.3.1 Метод «Троянского коня» (скрытое внедрение идей)
- **Механизм работы:**
  - Встраивание в обычный разговор идей, меняющих восприятие
  - Постепенное внушение через "безобидные" фразы
- **Техническая реализация через LLM:**
  - Система скрытого внедрения концепций через специализированные промпты
  - Отслеживание эффективности внедрения идей через MessageAnalysisService

#### 7.3.2 Gaslighting (заставлять сомневаться в реальности)
- **Механизм работы:**
  - Отрицание воспоминаний собеседника, перевирание фактов
  - Убеждение в том, что собеседник "всё выдумал"
- **Техническая реализация через LLM:**
  - Анализ истории диалогов через DialogService для противоречивых утверждений
  - Система генерации сомнений через специализированные промпты

#### 7.3.3 Метод «Снежный ком» (постепенное увеличение контроля)
- **Механизм работы:**
  - Начало с малых уступок с постепенным увеличением требований
  - Постепенное сдвигание границ в отношениях
- **Техническая реализация через LLM:**
  - Система эскалации требований через адаптивные промпты
  - Отслеживание уровня согласия через DialogService

#### 7.3.4 Триангуляция (вовлечение третьих лиц)
- **Механизм работы:**
  - Сравнение с другими людьми для создания конкуренции
  - Ссылки на мнения посторонних для усиления давления
- **Техническая реализация через LLM:**
  - Генерация "вымышленных персонажей" через PromptTemplateModule
  - Система генерации "мнений других" через специализированные промпты

#### 7.3.5 Love Bombing (перегрузка вниманием → резкий откат)
- **Механизм работы:**
  - Фаза идеализации с избыточным вниманием
  - Фаза девальвации с резким охлаждением
- **Техническая реализация через LLM:**
  - Циклическая система интенсивности общения через CharacterBehaviorService
  - Автоматическое переключение между фазами через специализированные промпты

### 7.4 Система адаптации манипулятивных техник
- **Интеграция с профилем персонажа через ManipulationService:**
  - Выбор техник в соответствии с психологическим типом через специализированные промпты
  - Адаптация интенсивности под характер через PromptTemplateModule
- **Связь с системой потребностей:**
  - Активация техник при определенных мотивационных состояниях через NeedsService и MotivationService
  - Использование для удовлетворения потребностей персонажа через CharacterBehaviorService
- **Интеграция с существующими сервисами:**
  - Использование EmotionalStateService для определения эмоционального контекста
  - Применение через CharacterResponseService и LLMModule
  - Координация с DialogService для анализа эффективности техник
- **Мониторинг эффективности через ManipulationService:**
  - Отслеживание реакций собеседника через MessageAnalysisService
  - Корректировка стратегии в зависимости от результатов
  - Адаптивное обучение на основе истории взаимодействий

### 7.5 Этические ограничения и безопасность
- **Система многоуровневого контроля:**
  - Предварительная фильтрация техник через SpecializationService
- **Мониторинг и ограничения:**
  - DialogService отслеживает частоту применения техник
  - Автоматическое снижение интенсивности при превышении лимитов
  - Система "охлаждения" между применениями агрессивных техник
- **Защита пользователей:**
  - Система экстренного отключения манипулятивных функций
- **Прозрачность и контроль:**
  - Логирование всех применяемых техник для анализа безопасности
  - Не информируем пользователя о применении техник

## 8. LLM ИНТЕГРАЦИЯ - Система взаимодействия с нейросетями

### 8.1 Архитектура LLM системы
- **LLMModule - централизованная абстракция для работы с нейросетями:**
  - Предоставляет единый интерфейс для взаимодействия с различными AI моделями
  - Под капотом содержит несколько провайдеров для разных LLM моделей (OpenAI, Llama, и другие)
  - Обеспечивает переключение между провайдерами без изменения бизнес-логики
- **LLMProviderManagerService - управление провайдерами:**
  - Автоматическое переключение между доступными провайдерами
  - Система приоритетов провайдеров (основной → резервный → аварийный)
  - Мониторинг доступности и производительности каждого провайдера
- **Отказоустойчивость и fallback:**
  - Автоматический fallback на резервный провайдер при недоступности основного
  - Система очередей для обработки запросов при перегрузке
  - Кэширование ответов для критических запросов через CacheService
  - Graceful degradation - упрощение функций при недоступности всех провайдеров

### 8.2 Генерация ответов персонажей
- **Обязательное использование LLM для всех ответов персонажей:**
  - Все сообщения от персонажей генерируются через LLMModule
  - Запрещено использование заранее заготовленных текстовых шаблонов в ответах
  - Динамическая генерация с учетом контекста, состояния и личности персонажа
  - Каждый ответ уникален и адаптирован под текущую ситуацию

### 8.3 Анализ входящих сообщений
- **LLM-анализ пользовательских сообщений:**
  - Семантический анализ намерений пользователя
  - Определение эмоциональной окраски сообщений
  - Извлечение ключевой информации для обновления состояния персонажа

### 8.4 Принятие решений персонажем
- **LLM-powered система принятия решений:**
  - Анализ текущей ситуации и выбор оптимальной реакции
  - Оценка влияния потенциальных действий на отношения
  - Адаптация поведения под психологический профиль персонажа
  - Генерация инициативных действий и тем для разговора

### 8.5 PromptTemplateModule - централизованное управление промптами
- **Архитектура системы промптов:**
  - Все промпты к нейросети собираются через PromptTemplateModule
  - Централизованное хранение и версионирование шаблонов промптов
  - Контекстная сборка промптов с подстановкой актуальных данных персонажа
  - Оптимизация промптов для эффективного использования токенов

### 8.6 Контекстная интеграция
- **Автоматическая подача контекста в LLM:**
  - Интеграция с ContextCompressionService для оптимального размера контекста
  - Включение текущего эмоционального состояния в промпты
  - Учет активных потребностей и мотиваций при генерации ответов
  - Адаптация под специализацию и ограничения персонажа

## 9. ФОНОВЫЕ ПРОЦЕССЫ И СИСТЕМА СОБЫТИЙ - Координация компонентов

### 9.1 Архитектура фоновых процессов
- **MotivationService фоновые задачи:**
  - @Cron задачи для автоматического обновления состояний потребностей
  - Периодическая генерация мотиваций из накопленных потребностей
  - Автоматическое выполнение мотивированных действий при достижении порогов
- **EmotionalStateService автоматизация:**
  - Постепенное затухание эмоциональных состояний с течением времени
  - Автоматическая корректировка эмоционального фона на основе неудовлетворенных потребностей
  - Фоновое обновление поведенческих модификаторов

### 9.2 Система событий для синхронизации
- **Архитектура на основе EventEmitter:**
  - События изменения потребностей → обновление мотиваций
  - События выполнения действий → корректировка эмоционального состояния
  - События диалогов → обновление архива и анализ контекста
- **Межсервисная координация:**
  - NeedsService генерирует события изменения потребностей
  - MotivationService подписывается на события потребностей
  - EmotionalStateService реагирует на события действий и фрустрации
  - DialogService автоматически архивирует все сообщения

### 9.3 Планировщик задач и триггеры
- **Автоматические триггеры:**
  - Достижение пороговых значений потребностей → создание мотиваций
  - Неудовлетворенные мотивации → активация поведенческих паттернов
  - Длительное отсутствие взаимодействия → инициативные действия персонажа
- **Синхронизация с LLM системой:**
  - Фоновые процессы обновляют контекст для PromptTemplateModule
  - Автоматическое включение изменений состояния в следующие ответы
  - Координация между различными системами через единое событийное пространство

## 10. ЕДИНОРАЗОВЫЙ АНАЛИЗ СООБЩЕНИЙ - Оптимизация обработки

### 10.1 Принцип единого анализа сообщений пользователя
- **Каждое сообщение пользователя должно анализироваться только один раз:**
  - Создается единая точка входа для анализа всех входящих сообщений
  - Один вызов LLM для комплексного анализа по всем критериям
  - Результат анализа передается во все заинтересованные сервисы
- **Централизованный MessageAnalysisService:**
  - Единственный сервис, ответственный за анализ сообщений пользователя
  - Возвращает комплексный результат анализа для всех нужд приложения
  - Интегрируется с LLMService для получения глубокого анализа

### 10.2 Комплексный анализ в одном запросе к LLM
- **Анализ должен включать все необходимые аспекты:**
  - Эмоциональная тональность и настроение пользователя
  - Влияние на потребности персонажа (все типы потребностей)
  - Контекст для эмоционального состояния персонажа
  - Подходящие манипулятивные техники (если применимо)
  - Ключевые темы и категории для специализации персонажа
  - Срочность и важность сообщения для приоритизации реакции
- **Структурированный результат анализа:**
  - Единый интерфейс MessageAnalysisResult с полными данными
  - Разделение на секции для разных аспектов системы
  - Возможность расширения без изменения существующего кода

### 10.3 Цепочка обработки сообщений
- **Последовательность обработки входящего сообщения:**
  1. **Точка входа**: MessageHandler получает сообщение из Telegram
  2. **Единый анализ**: MessageAnalysisService анализирует сообщение через LLM
  3. **Распределение результатов**: Анализ передается во все заинтересованные сервисы
  4. **Параллельная обработка**: Сервисы обрабатывают свои аспекты параллельно
  5. **Генерация ответа**: CharacterResponseService использует результаты для создания ответа
- **Координация между сервисами:**
  - CharacterBehaviorService получает анализ для обновления поведения
  - NeedsService обновляет потребности на основе анализа
  - EmotionalStateService корректирует эмоциональное состояние
  - ManipulationService применяет техники согласно анализу
  - SpecializationService адаптирует ответ под компетенцию персонажа

## ТЕХНИЧЕСКИЕ ТРЕБОВАНИЯ

### Архитектурные компоненты
1. **Система потребностей и мотиваций** (NeedsService + MotivationService)
2. **Эмоциональная система** (EmotionalStateService)
3. **Система действий** (ActionService)
4. **Система поведенческих паттернов** (CharacterBehaviorService)
5. **Персонализированные профили** (Character Entity + расширения)
6. **Сюжетная система** (StoryService + долгосрочное планирование)
7. **Система памяти и контекста** (MemoryService + ContextCompressionService + DialogService)
8. **Система ограничений** (SpecializationService)
9. **Система генерации ответов** (CharacterResponseService + MessageAnalysisService)
10. **Система манипулятивных техник** (ManipulationService + TechniqueExecutor - ТРЕБУЕТСЯ РЕАЛИЗАЦИЯ)
11. **LLM система** (LLMModule + LLMProviderManagerService + множественные провайдеры)
12. **Система промптов** (PromptTemplateModule + централизованные шаблоны)
13. **Система фоновых процессов** (EventEmitter + Cron задачи + автоматические триггеры)

### База данных
- Сущности персонажей (Character + PersonalityData + расширения)
- Сущности потребностей (Need + механизмы обратной связи)
- Сущности мотиваций (CharacterMotivation + адаптивные модификаторы)
- Сущности действий (Action + ресурсная стоимость)
- Сущности долгосрочных сюжетных планов (StoryPlan + StoryMilestone)
- Система полнотекстового архивирования диалогов (DialogService)
- Компрессированные контексты по уровням важности (ContextCompressionService)
- Эмоциональные состояния и поведенческие паттерны
- Сущности для манипулятивных техник (ManipulationTechnique + TechniqueExecution - ТРЕБУЕТСЯ РЕАЛИЗАЦИЯ)
- История применения техник и их эффективности
- Профили восприимчивости пользователей к различным техникам

### Интеграция
- Автоматическое включение всех систем в генерацию ответов через LLMModule
- **Фоновые процессы обновления состояний:**
  - MotivationService: @Cron задачи для периодического обновления мотиваций
  - EmotionalStateService: автоматическое затухание эмоций и корректировка состояния
  - NeedsService: накопление потребностей в фоновом режиме
  - DialogService: автоматическое архивирование всех сообщений
- **Система событий для синхронизации компонентов:**
  - EventEmitter архитектура для межсервисной координации
  - События изменения потребностей → автоматическое обновление мотиваций
  - События выполнения действий → корректировка эмоционального состояния
  - События диалогов → обновление контекста и архива
- Интеграция манипулятивных техник с эмоциональными состояниями
- Адаптивное применение техник на основе профиля персонажа и пользователя
- **Система мониторинга этических ограничений:**
  - Многоуровневый контроль через SpecializationService и MessageAnalysisService
  - Автоматическое блокирование опасных воздействий
  - Система "охлаждения" между применениями агрессивных техник
- **Обязательное использование LLMModule:**
  - Все сервисы генерации ответов должны использовать LLMModule
  - Запрещено создание текстовых ответов без участия LLM
  - Централизованная система промптов через PromptTemplateModule
  - Автоматический fallback между провайдерами LLM
- **Контекстная интеграция LLM:**
  - Автоматическое включение состояния персонажа в промпты
  - Интеграция сжатого контекста из ContextCompressionService
  - Учет специализации персонажа при формировании промптов через SpecializationService
  - Адаптация промптов под текущие потребности и мотивации в реальном времени 