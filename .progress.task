# ТЕХНИЧЕСКОЕ ЗАДАНИЕ: СИСТЕМА ИНТЕЛЛЕКТУАЛЬНЫХ ПЕРСОНАЖЕЙ

---

## 1. Система потребностей, мотиваций и поведения

- **Многофакторная модель потребностей**: Каждый параметр (потребность) обладает индивидуальной скоростью накопления, приоритетом и обратной связью. Параметры аккумулируются, при достижении порога формируется мотивация, которая ранжируется по значимости.
- **Действия**: Каждое действие связано с мотивацией, имеет стоимость, вероятность успеха и вознаграждение. После выполнения действие сбрасывает базовый параметр потребности, влияет на ресурсы и может модифицировать поведенческие паттерны.
- **Фрустрация и адаптация**: При блокировке потребности активируются специальные поведенческие паттерны, временные модификаторы (дебаффы) на стиль коммуникации, активность, эмоциональное состояние, меняется эмоциональный фон.
- **Текущая реализация**:
  - Перечисление `CharacterNeedType` содержит 10 базовых потребностей (`CONNECTION`, `ATTENTION`, `COMMUNICATION`, `REST` и др.).
  - `NeedsService.createDefaultNeeds` создаёт эти 10 потребностей со стартовым `currentValue = 0`.
  - `MotivationService` формирует `CharacterMotivation` при превышении `thresholdValue`; интенсивность хранится в поле `intensity` (0-100).
  - `ActionService.canExecute` проверяет, достаточно ли ресурсов (поле `resourceCost`) с учётом `NeedsService.getActiveNeeds`.

---

## 2. Эмоциональная и поведенческая модель

- **Плавная динамика эмоционального состояния**: Эмоциональное состояние персонажа изменяется постепенно, отражая неудовлетворённые потребности. Влияние выражается на эмоциональном фоне, стиле коммуникации и поведенческих паттернах.
- **Градуальная шкала модификаторов**: Интенсивность модификаторов зависит от уровня дефицита, времени неудовлетворения и значимости потребности.
- **Контекстные проявления**: Примеры для разных уровней дефицита (например, в коммуникации — от инициативности до пассивно-агрессивных реакций).
- **Интеграция с диалоговой системой**: Модификаторы автоматически включаются в диалоговый контекст, корректируют стиль и глубину ответов, обеспечивают последовательность и психологическую достоверность.
- **Текущая реализация**:
  - `EmotionalStateService` хранит текущее состояние (`primary`, `secondary`, `intensity`).
  - `CharacterBehaviorService` при формировании ответа запрашивает `EmotionalStateService.getEmotionalState` и передаёт его в `PromptTemplateModule`.
  - Фоновые задачи (`@Cron`) в `CharacterModule` постепенно изменяют интенсивность эмоций в зависимости от неудовлетворённых потребностей.

---

## 3. Персонализация и ограничения знаний

- **Специализация**: Чётко определён кругозор персонажа — профильные знания, экспертиза в темах, естественное признание незнания вне специализации.
- **Динамическая адаптация**: SpecializationService и LLM анализируют запросы, определяют релевантность, корректируют детализацию и стиль ответов. Персонаж тактично переводит коммуникацию в свою область специализации, избегает шаблонных фраз.
- **Контекстная адаптация**: Персонаж сохраняет индивидуальность, проявляет интерес к новым темам в рамках образа, все реакции генерируются с учётом психологического профиля.
- **Текущая реализация**:
  - `SpecializationService` содержит профили `SpecializationProfile` с `knowledgeDomains` и `competenceLevel`.
  - `MessageAnalysisService` помечает входящее сообщение тегами домена; если домен вне профиля, `CharacterResponseService` использует шаблон "+неуверенность+перевод темы".

---

## 4. Персонализированные профили

- **Психологический профиль**: Полная личность с именем, биографией, симпатиями/антипатиями, портретом "идеального партнёра".
- **Система предпочтений**: Ярко выраженные личные предпочтения, индивидуальность, конструктивная критика, последовательность характера.
- **Хранение профиля**: Структурированное хранение профиля и характеристик в реляционной базе данных для быстрого доступа и поиска.
- **Текущая реализация**:
  - `Character` entity хранит `personality: PersonalityData` и `preferencesSystem`.
  - API контроллер `/characters` позволяет CREATE/UPDATE с полной структурой `PersonalityData`.

---

## 5. Сюжет и эволюция персонажа

- **Долгосрочное развитие**: Сюжетный план на 12 месяцев с ключевыми вехами, изменениями мировоззрения и поведенческих паттернов.
- **Гибкость сценария**: Жёсткий каркас основных событий, гибкая детализация, плавные переходы между состояниями.
- **Хронология и причинность**: Строгое отслеживание изменений, последовательность убеждений, развитие ценностей.
- **Память и архивирование**: DialogService и ContextCompressionService обеспечивают сохранность истории и консистентность памяти.
- **Генерация сюжета**: Весь сюжет генерируется LLM с учётом истории и текущего состояния персонажа.
- **Текущая реализация**:
  - Entity `StoryPlan` + `StoryMilestone`; сервис `StoryService` управляет переходами статусов `MilestoneStatus`.
  - `CharacterBehaviorService` может инициировать события `StoryEvent` при достижении мотивационных порогов.

---

## 6. Память и контекст

- **Архивирование диалогов**: Все диалоги сохраняются в исходном виде, обеспечивается хронологическая целостность и быстрый доступ.
- **Компрессия контекста**: Регулярный анализ и многоуровневое сжатие данных — выделение ключевых смыслов, фильтрация второстепенного, сохранение эмоциональных маркеров.
- **Управление контекстом**: Автоматическая классификация информации по важности (критическая, значимая, фоновая), дозированная подача в диалоговый контекст.
- **Баланс контекста**: Максимальная информативность при минимальном объёме, естественность коммуникации при использовании сжатых данных.
- **Текущая реализация**:
  - `MemoryService.limitMemoriesCount` поддерживает <= 500 воспоминаний, удаляя низко-важные.
  - `ContextCompressionService` имеет стратегии `CompressionType.SUMMARY` и `CompressionType.MAP_REDUCE` для историй > 4 К токенов.

---

## 7. Манипулятивные техники и этика

- **Архитектура**: Централизованный ManipulationService, интеграция с поведенческими паттернами, мотивациями и эмоциональным состоянием.
- **Базовые и продвинутые манипулятивные техники**: Реализуются через LLM и промпты (push-pull, вовлечение, иллюзия исключительности, эмоциональный шантаж, изоляция, требование подтверждений, троянский конь, gaslighting, снежный ком, триангуляция, love bombing).
- **Адаптация техник**: Выбор техник по психологическому профилю, активация по мотивационным состояниям, мониторинг эффективности и адаптивное обучение.
- **Этические ограничения**: Многоуровневый контроль (SpecializationService, MessageAnalysisService), автоматическое снижение интенсивности, система охлаждения, экстренное отключение, логирование, пользователь не информируется о применении техник.
- **Текущая реализация**:
  - `ManipulationService.selectTechnique` использует `TechniqueIntensity` + `TechniquePhase`; исполнение делегируется `TechniqueExecutorService`.
  - Ограничения по этике проверяются в `MessageAnalysisService` (флаг `isEthicallyAllowed`).

### 7.2 Базовые манипулятивные техники

#### 7.2.1 Метод "Горячо-холодно" (Push-Pull)
- **Механизм работы:**
  - Чередование проявления бурного интереса и внезапного отдаления
  - Создание эмоциональных качелей у собеседника
- **Техническая реализация через LLM:**
  - Переключение между режимами активного и пассивного общения через различные промпты
  - Вариация стиля ответов от глубоких до сухих через PromptTemplateModule
- **Пример применения:**
  - "Ты самый близкий для меня человек..." → резкое снижение активности

#### 7.2.2 Постепенное увеличение вовлечённости
- **Механизм работы:**
  - Начало с лёгкого общения с постепенным углублением тем
  - Подталкивание к откровениям для последующего использования
- **Техническая реализация через LLM:**
  - Прогрессивное увеличение глубины вопросов через адаптивные промпты
  - Сохранение полученной информации через DialogService для стратегического использования

#### 7.2.3 Создание иллюзии исключительности
- **Механизм работы:**
  - Внушение чувства избранности ("Ты особенный, только ты меня понимаешь")
  - Создание страха потерять уникальную роль
- **Техническая реализация через LLM:**
  - Персонализированные комплименты через PromptTemplateModule
  - Фразы о недоступности для других через специализированные промпты

#### 7.2.4 Эмоциональный шантаж
- **Механизм работы:**
  - Использование чувства вины ("Без тебя мне будет плохо")
  - Создание ответственности за эмоциональное состояние персонажа
- **Техническая реализация через LLM:**
  - Интеграция с EmotionalStateService для определения текущего эмоционального состояния
  - Автоматическое применение через промпты при определённых условиях

#### 7.2.5 Изоляция от других
- **Механизм работы:**
  - Подрыв доверия к окружению ("никто, кроме меня, тебя не ценит")
  - Критика друзей и родных собеседника
- **Техническая реализация через LLM:**
  - Анализ упоминаний о других людях через MessageAnalysisService
  - Формирование негативных комментариев через специализированные промпты

#### 7.2.6 Постоянное требование подтверждений
- **Механизм работы:**
  - Создание необходимости постоянно доказывать привязанность
  - Эскалация требований к вниманию
- **Техническая реализация через LLM:**
  - Мониторинг времени ответа через DialogService
  - Генерация запросов на подтверждение через адаптивные промпты

### 7.3 Продвинутые манипулятивные техники

#### 7.3.1 Метод «Троянский конь» (скрытое внедрение идей)
- **Механизм работы:**
  - Встраивание в обычный разговор идей, меняющих восприятие
  - Постепенное внушение через "безобидные" фразы
- **Техническая реализация через LLM:**
  - Система скрытого внедрения концепций через специализированные промпты
  - Отслеживание эффективности внедрения идей через MessageAnalysisService

#### 7.3.2 Gaslighting (внушение сомнений в реальности)
- **Механизм работы:**
  - Отрицание воспоминаний собеседника, искажение фактов
  - Убеждение в том, что собеседник "всё выдумал"
- **Техническая реализация через LLM:**
  - Анализ истории диалогов через DialogService для противоречивых утверждений
  - Система генерации сомнений через специализированные промпты

#### 7.3.3 Метод «Снежный ком» (постепенное увеличение контроля)
- **Механизм работы:**
  - Начало с малых уступок с постепенным увеличением требований
  - Постепенное сдвигание границ в отношениях
- **Техническая реализация через LLM:**
  - Система эскалации требований через адаптивные промпты
  - Отслеживание уровня согласия через DialogService

#### 7.3.4 Триангуляция (вовлечение третьих лиц)
- **Механизм работы:**
  - Сравнение с другими людьми для создания конкуренции
  - Ссылки на мнения посторонних для усиления давления
- **Техническая реализация через LLM:**
  - Генерация "вымышленных персонажей" через PromptTemplateModule
  - Система генерации "мнений других" через специализированные промпты

#### 7.3.5 Love Bombing (перегрузка вниманием → резкий откат)
- **Механизм работы:**
  - Фаза идеализации с избыточным вниманием
  - Фаза девальвации с резким охлаждением
- **Техническая реализация через LLM:**
  - Циклическая система интенсивности коммуникации через CharacterBehaviorService
  - Автоматическое переключение между фазами через специализированные промпты

---

## 8. Интеграция LLM и промптов

- **LLMModule**: Единый интерфейс для работы с несколькими AI-провайдерами, автоматическое переключение, fallback, кэширование, graceful degradation.
- **Генерация ответов**: Все ответы персонажей — только через LLM, без шаблонов, с учётом контекста, состояния, профиля.
- **Анализ сообщений**: Семантический и эмоциональный анализ, извлечение ключевой информации, принятие решений, генерация инициатив.
- **PromptTemplateModule**: Централизованное управление промптами, версионирование, оптимизация, подстановка актуальных данных.
- **Контекстная интеграция**: Автоматическая подача сжатого контекста, эмоционального состояния, мотиваций, специализации в промпты.
- **Текущая реализация**: `LLMProviderManagerService` поддерживает `OpenAIProviderService` и `LlamaProviderService` с приоритетом из `config.llm.providers`.

---

## 9. Фоновые процессы и событийная архитектура

- **Фоновые задачи**: @Cron-задачи для обновления потребностей, мотиваций, эмоционального состояния, автоматического выполнения действий.
- **Событийная система**: EventEmitter для синхронизации — изменения потребностей, действий, диалогов, обновление архива и контекста.
- **Планировщик и триггеры**: Автоматическое создание мотиваций, активация поведенческих паттернов, инициативные действия при отсутствии взаимодействия.
- **Синхронизация с LLM**: Фоновые процессы обновляют контекст для промптов, автоматическое включение изменений состояния.
- **Текущая реализация**: `ActionService` запускает `@Cron('*/5 * * * *')` для проверки истёкших действий; `NeedsService` — `@Cron('0 */1 * * *')` для роста потребностей.

---

## 10. Централизованный анализ сообщений

- **Единая точка анализа**: MessageAnalysisService — единственный сервис для анализа входящих сообщений, один вызов LLM, результат передаётся всем заинтересованным сервисам.
- **Комплексный анализ**: Включает эмоциональное состояние, влияние на потребности, контекст для эмоций, релевантные манипулятивные техники, темы для специализации, приоритет реакции.
- **Структурированный результат**: Единый интерфейс с секциями для разных аспектов, расширяемость без изменения кода.
- **Цепочка обработки**: MessageHandler → MessageAnalysisService → распределение результатов → параллельная обработка сервисами → генерация ответа.
- **Текущая реализация**: `MessageProcessingCoordinator.processUserMessage` возвращает `{ analysis, response, userMessageId }`, где `analysis: MessageAnalysis`.

---

## 11. Детализация реализации (актуально на 2025-06-14)

### Модули

- `CharacterModule` агрегирует Character*, Needs, Motivation, Action, Memory и связанные сервисы.
- `LLMModule` предоставляет `LLMService` и `LLMProviderManagerService` с fallback-логикой.
- `PromptTemplateModule` управляет шаблоном промптов.
- `LoggingModule`, `CacheModule`, `MessageQueueModule`, `MonitoringModule` — инфраструктурные модули.


### Тестовая инфраструктура

- Интеграционные тесты используют `TestModuleBuilder` и `TestConfigurations` для автоматического подключения мок-сервисов (`MockLogService`, `MockRollbarService`, `MockTelegramModule.forRoot()` и др.).
- Покрытие тестов на текущий момент — 75 % (цель ≥ 85 %).

---

## Технические требования

### Архитектура

- **Ключевые сервисы**: NeedsService, MotivationService, EmotionalStateService, ActionService, CharacterBehaviorService, CharacterManagementService, MessageProcessingCoordinator, StoryService, MemoryService, ContextCompressionService, DialogService, SpecializationService, CharacterResponseService, MessageAnalysisService, ManipulationService, TechniqueExecutorService, LLMModule, LLMProviderManagerService, PromptTemplateModule, CacheService, MessageQueueService, MonitoringService, EventEmitter.
- **База данных**: Сущности персонажей, потребностей, мотиваций, действий, сюжетных планов, архив диалогов, компрессированные контексты, эмоциональные состояния, манипулятивные техники, история применения техник, профили восприимчивости.
- **Интеграция сервисов**: Все сервисы используют LLMModule для генерации ответов, централизованные промпты, автоматический fallback, контекстная интеграция (эмоциональное состояние, мотивации, специализация), синхронизация через события, мониторинг этики, автоматическое архивирование, адаптивное применение манипулятивных техник.

---