#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: node scripts/check-db-connection.js
 */

const { Client } = require('pg');
const { execSync } = require('child_process');

async function checkDatabaseConnection() {
  const client = new Client({
    host: process.env.TEST_DB_HOST || 'localhost',
    port: parseInt(process.env.TEST_DB_PORT || '5433', 10),
    user: process.env.TEST_DB_USERNAME || 'test_user',
    password: process.env.TEST_DB_PASSWORD || 'test_password',
    database: process.env.TEST_DB_NAME || 'nexus_test',
    connectionTimeoutMillis: 5000,
  });

  try {
    await client.connect();
    await client.query('SELECT 1');
    await client.end();
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    try {
      await client.end();
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    }
    return false;
  }
}

async function waitForDatabaseConnection(maxRetries = 5, retryInterval = 2000) {
  for (let i = 0; i < maxRetries; i++) {
    if (i > 0) {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ${i + 1}/${maxRetries}...`);
    }
    
    const isConnected = await checkDatabaseConnection();
    if (isConnected) {
      return true;
    }
    
    if (i < maxRetries - 1) {
      console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${retryInterval / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
      await new Promise(resolve => setTimeout(resolve, retryInterval));
    }
  }
  
  console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
  return false;
}

async function startDatabaseContainer() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º...');
  try {
    // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å docker compose (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
    execSync('docker compose -f docker-compose.test.yml up -d', { stdio: 'inherit' });
  } catch (error) {
    try {
      // –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º docker-compose (—Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
      console.log('–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å docker-compose (—Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)...');
      execSync('docker-compose -f docker-compose.test.yml up -d', { stdio: 'inherit' });
    } catch (composeError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º.');
      console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é:');
      console.error('docker compose -f docker-compose.test.yml up -d');
      return false;
    }
  }
  
  console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –∑–∞–ø—É—â–µ–Ω—ã');
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –ñ–¥–µ–º, –ø–æ–∫–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞
  return waitForDatabaseConnection(10, 3000);
}

async function main() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
  const isConnected = await checkDatabaseConnection();
  
  if (isConnected) {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã');
    process.exit(0);
  } else {
    console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...');
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    const started = await startDatabaseContainer();
    
    if (started) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã');
      process.exit(0);
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ');
      console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
      console.error('docker compose -f docker-compose.test.yml up -d');
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
  console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 