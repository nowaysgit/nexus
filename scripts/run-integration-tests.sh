#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å LLM
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/run-integration-tests.sh [--cleanup]

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
cleanup() {
    log_info "–û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    
    cd "$PROJECT_ROOT"
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f docker-compose.integration.yml down -v --remove-orphans 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if [ "$1" = "--full-cleanup" ]; then
        docker system prune -f
        docker volume prune -f
    fi
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
start_infrastructure() {
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É..."
    
    cd "$PROJECT_ROOT"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    docker-compose -f docker-compose.integration.yml up -d test-postgres test-redis test-ollama
    
    log_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
    timeout=60
    while [ $timeout -gt 0 ]; do
        if docker-compose -f docker-compose.integration.yml exec -T test-postgres pg_isready -U test_user -d nexus_test &>/dev/null; then
            log_success "PostgreSQL –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 2
        timeout=$((timeout - 2))
    done
    
    if [ $timeout -le 0 ]; then
        log_error "PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        return 1
    fi
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis
    timeout=30
    while [ $timeout -gt 0 ]; do
        if docker-compose -f docker-compose.integration.yml exec -T test-redis redis-cli ping &>/dev/null; then
            log_success "Redis –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 2
        timeout=$((timeout - 2))
    done
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Ollama
    log_info "–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ Ollama (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..."
    timeout=180
    while [ $timeout -gt 0 ]; do
        if curl -s http://localhost:11435/api/tags &>/dev/null; then
            log_success "Ollama –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 5
        timeout=$((timeout - 5))
    done
    
    if [ $timeout -le 0 ]; then
        log_warning "Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (—Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã)"
    fi
}

# –ó–∞–≥—Ä—É–∑–∫–∞ LLM –º–æ–¥–µ–ª–∏
setup_llm_model() {
    log_info "–ó–∞–≥—Ä—É–∂–∞–µ–º LLM –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
    docker-compose -f docker-compose.integration.yml up test-model-setup
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if curl -s http://localhost:11435/api/tags | grep -q "llama3.2:1b"; then
        log_success "–ú–æ–¥–µ–ª—å llama3.2:1b –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    else
        log_warning "–ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é"
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã..."
    
    cd "$PROJECT_ROOT"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    export NODE_ENV=test
    export DATABASE_URL="postgresql://test_user:test_password@localhost:5433/nexus_test"
    export REDIS_URL="redis://localhost:6380"
    export LLM_PROVIDER="llama"
    export LLM_ENDPOINT="http://localhost:11435"
    export LLM_MODEL="llama3.2:1b"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    log_info "–í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    npm run migration:run
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã..."
    if npm run test:integration; then
        log_success "–í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        return 0
    else
        log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        return 1
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å LLM"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    CLEANUP_MODE="normal"
    RUN_TESTS=true
    
    for arg in "$@"; do
        case $arg in
            --cleanup)
                cleanup "$CLEANUP_MODE"
                exit 0
                ;;
            --full-cleanup)
                CLEANUP_MODE="full-cleanup"
                cleanup "$CLEANUP_MODE"
                exit 0
                ;;
            --setup-only)
                RUN_TESTS=false
                ;;
        esac
    done
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏
    check_dependencies
    cleanup
    start_infrastructure
    setup_llm_model
    
    if [ "$RUN_TESTS" = true ]; then
        if run_tests; then
            log_success "üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
            exit 0
        else
            log_error "üí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
            exit 1
        fi
    else
        log_success "üîß –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –≤—Ä—É—á–Ω—É—é:"
        log_info "npm run test:integration"
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'log_warning "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—á–∏—â–∞–µ–º..."; cleanup; exit 130' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
