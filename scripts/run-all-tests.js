#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
 * –ó–∞–ø—É—Å–∫: node scripts/run-all-tests.js
 */

const { spawnSync } = require('child_process');
const path = require('path');
const fs = require('fs');

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
const logsDir = path.resolve(__dirname, '../logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir);
}
const logFilePath = path.join(logsDir, 'test-run.log');
// –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
fs.writeFileSync(logFilePath, '');

function logToFile(data) {
  fs.appendFileSync(logFilePath, data);
}

function runCommand(command, args = [], options = {}) {
  console.log(`\nüîß –ó–∞–ø—É—Å–∫: ${command} ${args.join(' ')}`);
  const result = spawnSync(command, args, {
    stdio: ['ignore', 'pipe', 'pipe'],
    env: { ...process.env, NODE_ENV: 'test', ...options.env },
    shell: options.shell ?? false,
  });

  if (result.stdout) {
    process.stdout.write(result.stdout);
    logToFile(result.stdout);
  }
  if (result.stderr) {
    process.stderr.write(result.stderr);
    logToFile(result.stderr);
  }

  if (result.status !== 0 && !options.ignoreError) {
    throw new Error(`–ö–æ–º–∞–Ω–¥–∞ ${command} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º ${result.status}`);
  }
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ (–ª–æ–≥: logs/test-run.log)');

try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    runCommand('node', ['scripts/check-db-connection.js']);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    runCommand('npx', ['tsc', '--noEmit']);
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞');

    // –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã
    console.log('\nüìã –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤...');
    const unitOptions = [
        '--coverage',
        '--coverageReporters=text',
        '--coverageReporters=lcov',
        '--coverageDirectory=coverage/unit',
        '--testPathIgnorePatterns=.*\\.integration\\.test\\.ts$',
        '--testPathIgnorePatterns=.*\\.e2e\\.test\\.ts$'
    ];

    try {
      runCommand('jest', unitOptions, { ignoreError: true, shell: true });
      console.log('‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    } catch (e) {
      console.error('‚ö†Ô∏è –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
    }

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    console.log('\nüìã –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
    const integrationOptions = [
        '--coverage',
        '--coverageReporters=text',
        '--coverageReporters=lcov',
        '--coverageDirectory=coverage/integration',
        '--testMatch=**/*.integration.test.ts',
        '--forceExit',
        '--detectOpenHandles',
        '--testTimeout=30000',
        '--config=jest.integration.config.js'
    ];

    try {
      runCommand('jest', integrationOptions, { ignoreError: true, shell: true });
      console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    } catch (e) {
      console.error('‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç—á—ë—Ç—ã –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
    console.log('\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...');
    try {
        runCommand('npx', ['nyc', '--version'], { ignoreError: false });

        runCommand('npx', ['nyc', 'merge', 'coverage/unit', 'coverage/merged-report.json']);
        runCommand('npx', ['nyc', 'merge', 'coverage/integration', 'coverage/merged-integration.json']);
        runCommand('npx', ['nyc', 'merge', 'coverage', 'coverage/final-report.json']);
        runCommand('npx', ['nyc', 'report', '--reporter=text', '--reporter=lcov', '--temp-dir=coverage']);

        console.log('‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç nyc');
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –û—Ç—á–µ—Ç—ã –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ coverage/');
} catch (error) {
    logToFile(`\n‚ùå –°–±–æ–π: ${error.message}`);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
    process.exit(1);
} 