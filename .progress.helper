{
  "p": {
    "d": {
      "p": "/nexus",
      "t": "d",
      "c": [
        {
          "p": "/lib/tester/mocks",
          "t": "d",
          "c": [
            {
              "p": "/index.ts",
              "t": "f",
              "e": ["MockLogService", "MockRollbarService", "mockConfigService", "MockEventEmitter", "mockLlamaProviderService", "MockMemoryService", "MockNeedsService", "MockUserService", "createMockTelegramService", "mockTelegramService", "MockTelegramModule", "MockLLMProviderManagerService", "MockEmotionalStateService", "TelegrafTokenProvider", "MockProviderFactory"],
              "d": "Централизованный экспорт всех моков для тестов"
            },
            {
              "p": "/log.service.mock.ts",
              "t": "f",
              "e": ["MockLogService"],
              "d": "Мок для LogService с поддержкой всех методов логирования и типизированным интерфейсом MockWinstonLogger для улучшения типизации"
            },
            {
              "p": "/rollbar.service.mock.ts",
              "t": "f",
              "e": ["MockRollbarService"],
              "d": "Мок для RollbarService с поддержкой методов логирования и типизированным интерфейсом MockCalls для хранения истории вызовов"
            },
            {
              "p": "/config.service.mock.ts",
              "t": "f",
              "e": ["mockConfigService", "ConfigServiceProvider"],
              "d": "Мок для ConfigService и провайдер для внедрения в тесты"
            },
            {
              "p": "/event-emitter.mock.ts",
              "t": "f",
              "e": ["MockEventEmitter"],
              "d": "Мок для EventEmitter2 с поддержкой событий"
            },
            {
              "p": "/llama-provider.mock.ts",
              "t": "f",
              "e": ["mockLlamaProviderService"],
              "d": "Мок для LlamaProviderService"
            },
            {
              "p": "/memory-service.mock.ts",
              "t": "f",
              "e": ["MockMemoryService"],
              "d": "Мок для MemoryService с поддержкой всех методов работы с памятью"
            },
            {
              "p": "/needs-service.mock.ts",
              "t": "f",
              "e": ["MockNeedsService"],
              "d": "Мок для NeedsService с поддержкой методов работы с потребностями"
            },
            {
              "p": "/user-service.mock.ts",
              "t": "f",
              "e": ["MockUserService"],
              "d": "Мок для UserService с поддержкой CRUD операций"
            },
            {
              "p": "/telegram-service.mock.ts",
              "t": "f",
              "e": ["createMockTelegramService", "mockTelegramService"],
              "d": "Мок для TelegramService и фабрика для его создания"
            },
            {
              "p": "/mock-telegram.module.ts",
              "t": "f",
              "e": ["MockTelegramModule", "mockTelegramCoreService", "mockAccessControlService", "mockCharacterCreationService", "mockMessageService", "mockMessageFormatterService", "mockKeyboardFormatterService", "mockTelegramUserService", "mockTelegramInitializationService"],
              "d": "Модуль с моками для Telegram компонентов. Предоставляет MockTelegramModule.forRoot() для замены TelegrafModule в тестах."
            },
            {
              "p": "/jest.mocks.ts",
              "t": "f",
              "e": ["MockLLMProviderManagerService", "MockEmotionalStateService"],
              "d": "Моки для Jest с использованием jest.fn()"
            },
            {
              "p": "/telegraf-token.provider.ts",
              "t": "f",
              "e": ["TelegrafTokenProvider", "mockTelegraf"],
              "d": "Провайдер токена для Telegraf и мок для Telegraf. Решает проблему 'Bot Token is required' в тестах."
            },
            {
              "p": "/mock-provider.ts",
              "t": "f",
              "e": ["MockProviderFactory"],
              "d": "Фабрика для создания моков провайдеров"
            },
            {
              "p": "/mock-logging.module.ts",
              "t": "f",
              "e": ["MockLoggingModule"],
              "d": "Глобальный модуль-заглушка, замещающий LoggingModule в тестах. Метод forRoot() экспортирует: 1) LogService (мок – MockLogService); 2) WINSTON_MODULE_PROVIDER (заглушка с jest.fn()). Используется prepareImportsForTesting и может импортироваться напрямую, гарантируя наличие LogService без зависимостей Winston/FS."
            },
            {
              "p": "/lib/tester/mocks/mock-typeorm.module.ts",
              "t": "f",
              "e": ["MockTypeOrmModule"],
              "d": "Глобальный модуль-заглушка TypeORM для тестов. Экспортирует DATA_SOURCE и алиас DataSource; автоматически подключается через TestConfigurations.prepareImportsForTesting. Использует singleton DataSource для всех тестов, поддерживает автоматическое определение requiresDatabase из контекста теста и возвращает мок при отсутствии базы данных."
            },
            {
              "p": "/lib/tester/mocks/mock-infrastructure.module.ts",
              "t": "f",
              "e": ["MockInfrastructureModule"],
              "d": "Глобальный модуль-заглушка, заменяющий InfrastructureModule в тестах. Экспортирует моки EncryptionService и ApiKeyService (MockEncryptionService, MockApiKeyService). Подключается автоматически через prepareImportsForTesting." 
            },
            {
              "p": "/mocks/log.service.mock.ts",
              "t": "f",
              "e": ["MockLogService"],
              "d": "Мок LogService для тестирования с типизированными jest.Mock методами и интерфейсом MockWinstonLogger для улучшения типизации"
            },
            {
              "p": "/mocks/rollbar.service.mock.ts",
              "t": "f",
              "e": ["MockRollbarService"],
              "d": "Мок RollbarService для тестирования с типизированным интерфейсом MockCalls для хранения истории вызовов"
            },
            {
              "p": "/mocks/llm.service.mock.ts",
              "t": "f",
              "e": ["MockLLMService"],
              "d": "Типизированный мок LLMService с полной поддержкой интерфейса ILLMTextResult и правильной типизацией методов"
            }
          ]
        },
        {
          "p": "/lib/tester/test-configurations",
          "t": "d",
          "c": [
            {
              "p": "/index.ts",
              "t": "f",
              "e": ["TestConfigurations", "requiredMocksAdder", "addConfigServiceProvider", "addDataSourceProvider", "addTelegrafTokenProvider", "prepareImportsForTesting"],
              "d": "Центральный модуль для управления тестовыми конфигурациями. requiredMocksAdder автоматически добавляет все необходимые моки (включая ConfigService, LogService, RollbarService, Telegraf-токен и другие) на основе импортируемых в тест модулей. Функция prepareImportsForTesting автоматически заменяет TelegrafModule на MockTelegramModule.forRoot(), а LoggingModule — на MockLoggingModule.forRoot() в импортах, устраняя дублирование и упрощая настройку тестов. С версии шага 335 дополнительно помечает использование ALL_TEST_ENTITIES как deprecated и выводит предупреждение, побуждая отказаться от импорта сущностей вручную. Важно: для тестов, работающих с базой данных, необходимо добавлять параметр requiresDatabase: true в конфигурацию теста."
            },
            {
              "p": "/telegram-test.configuration.ts",
              "t": "f",
              "e": ["containsTelegramModule", "addMockTelegramServiceToProviders", "addTelegrafTokenToProviders", "replaceTelegrafModule", "containsTelegrafModule"],
              "d": "Конфигурация для тестирования Telegram модулей. Содержит функции для проверки наличия TelegramModule и TelegrafModule в импортах, добавления моков и замены TelegrafModule на MockTelegramModule.forRoot()."
            },
            {
              "p": "/logging-test.configuration.ts",
              "t": "f",
              "e": ["getLoggingTestProviders", "addLoggingMocks"],
              "d": "Конфигурация для тестирования модуля логирования с типизированными провайдерами"
            },
            {
              "p": "/llm-test.configuration.ts",
              "t": "f",
              "e": ["containsLLMModule", "addLLMMocks"],
              "d": "Конфигурация для тестирования LLM модулей с использованием типизированного MockLLMService"
            },
            {
              "p": "/dialog-test.configuration.ts",
              "t": "f",
              "e": ["getDialogTestConfig", "containsDialogModule", "addMockUserServiceToProviders", "addDialogServiceMocks"],
              "d": "Конфигурация для тестирования DialogService с типизированными моками и автоматическим добавлением UserService. Улучшена обработка ошибок и типизация для повышения надежности тестов. Содержит функции для проверки наличия DialogModule в импортах и добавления mockUserService в провайдеры."
            }
          ]
        },
        {
          "p": "/lib/tester/utils",
          "t": "d",
          "c": [
            {
              "p": "/test-module-builder.ts",
              "t": "f",
              "e": ["TestModuleBuilder", "TestModuleConfig"],
              "d": "Утилита для построения тестовых модулей с автоматическими моками. Предоставляет удобный интерфейс для создания тестовых модулей с автоматическим добавлением всех необходимых моков и заменой TelegrafModule на MockTelegramModule.forRoot(). Решает проблемы с зависимостями в тестах, такие как отсутствие ConfigService для RollbarService и токена для Telegraf. Начиная с шага 335 автоматически заменяет также LoggingModule на MockLoggingModule.forRoot() даже если prepareImportsForTesting не был вызван вручную, и безусловно добавляет TelegrafTokenProvider."
            },
            {
              "p": "/test-functions.ts",
              "t": "f",
              "e": ["createTest", "createTestSuite", "TestConfigType"],
              "d": "Основные функции для создания тестов и тестовых наборов с поддержкой различных типов конфигурации (BASIC, INTEGRATION, E2E). Для тестов, работающих с базой данных, необходимо добавлять параметр requiresDatabase: true."
            }
          ]
        },
        {
          "p": "/src",
          "t": "d",
          "c": [
            {
              "p": "/app.module.ts",
              "t": "f",
              "e": ["AppModule"],
              "d": "Корневой модуль приложения NestJS с интеграцией всех модулей системы"
            },
            {
              "p": "/main.ts",
              "t": "f",
              "d": "Точка входа в приложение NestJS с настройкой сервера и middleware"
            },
            {
              "p": "/auth",
              "t": "d",
              "c": [
                {
                  "p": "/auth.module.ts",
                  "t": "f",
                  "e": ["AuthModule"],
                  "d": "Модуль аутентификации с JWT и Passport интеграцией"
                },
                {
                  "p": "/controllers/auth.controller.ts",
                  "t": "f",
                  "e": ["AuthController"],
                  "d": "REST API контроллер для логина, регистрации и профиля пользователя"
                },
                {
                  "p": "/services/auth.service.ts",
                  "t": "f",
                  "e": ["AuthService"],
                  "d": "Основной сервис аутентификации с валидацией и JWT токенами, использует bcrypt и LogService"
                },
                {
                  "p": "/dto/login.dto.ts",
                  "t": "f",
                  "e": ["LoginDto"],
                  "d": "DTO для данных входа в систему с валидацией"
                },
                {
                  "p": "/dto/register.dto.ts",
                  "t": "f",
                  "e": ["RegisterDto"],
                  "d": "DTO для регистрации нового пользователя с валидацией"
                },
                {
                  "p": "/interfaces/jwt-payload.interface.ts",
                  "t": "f",
                  "e": ["JwtPayload"],
                  "d": "Интерфейс для данных JWT токена"
                },
                {
                  "p": "/strategies/jwt.strategy.ts",
                  "t": "f",
                  "e": ["JwtStrategy"],
                  "d": "Passport стратегия для валидации JWT токенов"
                },
                {
                  "p": "/jwt-auth.guard.ts",
                  "t": "f",
                  "e": ["JwtAuthGuard"],
                  "d": "Guard для защиты маршрутов, требующих JWT аутентификации с логированием и обработкой исключений"
                },
                {
                  "p": "/user.decorator.ts",
                  "t": "f",
                  "e": ["User"],
                  "d": "Декоратор для извлечения пользователя из запроса с возможностью получения всего объекта или конкретного свойства"
                }
              ]
            },
            {
              "p": "/character",
              "t": "d",
              "c": [
                {
                  "p": "/character.module.ts",
                  "t": "f",
                  "e": ["CharacterModule"],
                  "d": "Центральный модуль персонажей - интегрирует все сервисы персонажей, LLMModule и PromptTemplateModule"
                },
                {
                  "p": "/services/character-management.service.ts",
                  "t": "f",
                  "e": ["CharacterManagementService", "ICharacterAnalysis"],
                  "d": "Объединенный сервис управления персонажами с анализом характеристик и созданием новых персонажей. Метод createCharacter принимает userId как number и создает персонажа с числовым userId."
                },
                {
                  "p": "/services/character.service.ts",
                  "t": "f",
                  "e": ["CharacterService"],
                  "d": "CRUD сервис для управления персонажами с базовыми операциями создания, поиска, обновления и удаления. Метод findByUserId принимает userId как number для соответствия с другими частями кода."
                },
                {
                  "p": "/services/needs.service.ts",
                  "t": "f",
                  "e": ["NeedsService"],
                  "d": "Сервис управления потребностями персонажей с автоматическими циклами роста, пороговыми значениями и механизмами обратной связи"
                },
                {
                  "p": "/services/motivation.service.ts",
                  "t": "f",
                  "e": ["MotivationService"],
                  "d": "Сервис управления мотивациями персонажей с автоматической генерацией из потребностей и фоновыми процессами обработки. Использует IMotivation вместо устаревшего Motivation и currentValue вместо устаревшего currentLevel. ВАЖНО: В методе createMotivation параметр successProbability должен быть целым числом (например, 80), а не дробным (0.8)."
                },
                {
                  "p": "/services/action.service.ts",
                  "t": "f",
                  "e": ["ActionService", "ActionResult", "CharacterAction", "ActionContext", "ActionTriggerContext"],
                  "d": "Сервис управления действиями персонажей с системой ресурсной стоимости, вероятности успеха и вознаграждений. ВАЖНО: В методе createActionWithResources параметр successProbability должен быть целым числом (например, 90), а не дробным (0.9)."
                },
                {
                  "p": "/services/emotional-state.service.ts",
                  "t": "f",
                  "e": ["EmotionalStateService", "EmotionalContext", "EmotionalImpact", "EmotionalManifestation"],
                  "d": "Сервис эмоционального состояния персонажей с градуальными воздействиями и контекстно-зависимыми проявлениями эмоций"
                },
                {
                  "p": "/services/character-behavior.service.ts",
                  "t": "f",
                  "e": ["CharacterBehaviorService", "FrustrationType", "FrustrationLevel", "FrustrationBehaviorPattern", "ActionTriggerContext"],
                  "d": "Сервис для управления поведением персонажей, включая проактивные действия и реакции на события. Метод selectActionForMotivation поддерживает работу с мотивациями как с полем priority, так и без него (используя intensity для вычисления приоритета в соотношении intensity/10). При вызове actionService.determineAndPerformAction передает полный контекст ActionTriggerContext со всеми необходимыми полями. Метод processActionTrigger обрабатывает триггеры действий и корректно работает с интерфейсом IMotivation, не требуя наличия поля description."
                },
                {
                  "p": "/services/specialization.service.ts",
                  "t": "f",
                  "e": ["SpecializationService", "KnowledgeDomain", "CompetenceLevel", "IgnorancePattern", "KnowledgeContext", "SpecializationProfile", "CompetenceCheck"],
                  "d": "Сервис управления специализацией персонажей с ограничениями компетенции и естественностью незнания в неподходящих темах"
                },
                {
                  "p": "/services/context-compression.service.ts",
                  "t": "f",
                  "e": ["ContextCompressionService", "DataImportanceLevel", "CompressionType", "IContextSegment", "ICompressionResult", "IContextWindow"],
                  "d": "Сервис интеллектуальной компрессии контекста диалогов с многоуровневой системой сжатия и LLM-анализом важности информации"
                },
                {
                  "p": "/services/story.service.ts",
                  "t": "f",
                  "e": ["StoryService"],
                  "d": "Сервис сюжетных событий с долгосрочным планированием эволюции персонажа и системой трансформации личности"
                },
                {
                  "p": "/services/memory.service.ts",
                  "t": "f",
                  "e": ["MemoryService"],
                  "d": "Сервис воспоминаний персонажей с системой долгосрочной и краткосрочной памяти и эмоциональной значимостью событий. ВАЖНО: При использовании MemoryService в тестах необходимо добавить CharacterMemory в TypeOrmModule.forFeature и установить параметр requiresDatabase: true для тестов."
                },
                {
                  "p": "/services/message-analysis.service.ts",
                  "t": "f",
                  "e": ["MessageAnalysisService", "MessageAnalysis"],
                  "d": "Сервис единоразового анализа сообщений пользователя с комплексной оценкой эмоций, потребностей, манипулятивных техник и специализации"
                },
                {
                  "p": "/services/message-processing-coordinator.service.ts",
                  "t": "f",
                  "e": ["MessageProcessingCoordinator"],
                  "d": "Координатор обработки сообщений как центральная точка взаимодействия между анализом и всеми системами персонажа"
                },
                {
                  "p": "/services/character-response.service.ts",
                  "t": "f",
                  "e": ["CharacterResponseService"],
                  "d": "Сервис генерации ответов персонажей с интеграцией LLM, контекста и психологического профиля персонажа"
                },
                {
                  "p": "/services/manipulation.service.ts",
                  "t": "f",
                  "e": ["ManipulationService", "ManipulativeTechniqueType", "TechniqueIntensity", "TechniquePhase", "ITechniqueExecution", "ITechniqueStrategy"],
                  "d": "Сервис манипулятивных техник согласно ТЗ МАНИПУЛЯТИВНЫЕ ТЕХНИКИ с методами selectTechnique, executeTechnique, updateUserProfile для работы с техниками"
                },
                {
                  "p": "/services/technique-executor.service.ts",
                  "t": "f",
                  "e": ["TechniqueExecutorService", "ITechniqueContext", "ITechniqueResult"],
                  "d": "Сервис для выполнения манипулятивных техник с использованием различных стратегий. Учитывает эмоциональное состояние, личность персонажа и контекст взаимодействия."
                },
                {
                  "p": "/entities/character.entity.ts",
                  "t": "f",
                  "e": ["Character", "PersonalityData"],
                  "d": "Entity персонажа с детализированными психологическими профилями, системой предпочтений и портретом идеального партнера. Поле userId теперь uuid (string) для соответствия User.id, устранена предыдущая несогласованность с numeric id."
                },
                {
                  "p": "/entities/need.entity.ts",
                  "t": "f",
                  "e": ["Need", "NeedPriority"],
                  "d": "Entity потребностей персонажа (character_needs), связь ManyToOne с Character теперь имеет onDelete:'CASCADE', поэтому потребности автоматически удаляются при удалении персонажа. Хранит текущий уровень, порог, приоритет и методы grow/reset/updateLevel."
                },
                {
                  "p": "/entities/character-motivation.entity.ts",
                  "t": "f",
                  "e": ["CharacterMotivation", "MotivationStatus", "MotivationIntensity"],
                  "d": "Entity мотиваций персонажа с ресурсной стоимостью, вероятностями успеха и системой интенсивности"
                },
                {
                  "p": "/entities/action.entity.ts",
                  "t": "f",
                  "e": ["Action", "ActionStatus"],
                  "d": "Entity действий персонажа с системой ресурсной стоимости, вероятности успеха и адаптивных модификаторов"
                },
                {
                  "p": "/entities/story-plan.entity.ts",
                  "t": "f",
                  "e": ["StoryPlan", "StoryMilestone", "TransformationType", "MilestoneStatus"],
                  "d": "Entity для долгосрочного планирования эволюции персонажа с системой этапов трансформации личности"
                },
                {
                  "p": "/entities/manipulation-technique.entity.ts",
                  "t": "f",
                  "e": ["TechniqueExecution", "UserManipulationProfile", "ManipulativeTechniqueType"],
                  "d": "Entity для манипулятивных техник и профилей пользователей"
                },
                {
                  "p": "/entities/emotional-state.ts",
                  "t": "f",
                  "e": ["EmotionalState", "Motivation", "EmotionCategory", "EmotionalReactionType"],
                  "d": "Основные интерфейсы эмоционального состояния персонажей с градуальной шкалой интенсивности и категориями реакций"
                },
                {
                  "p": "/controllers/character.controller.ts",
                  "t": "f",
                  "e": ["CharacterController"],
                  "d": "REST API контроллер для управления персонажами с CRUD операциями и анализом характеристик. Метод create преобразует userId из string (параметр URL) в number при вызове createCharacter."
                },
                {
                  "p": "/controllers/story.controller.ts",
                  "t": "f",
                  "e": ["StoryController"],
                  "d": "REST API контроллер для управления сюжетными событиями и долгосрочным планированием персонажей"
                },
                {
                  "p": "/interfaces/character-persona.interface.ts",
                  "t": "f",
                  "e": ["PsychologicalProfile", "PreferencesSystem", "IdealPartnerProfile"],
                  "d": "Интерфейсы персонализации персонажей с детализированными психологическими профилями и системой предпочтений"
                },
                {
                  "p": "/interfaces/analysis.interfaces.ts",
                  "t": "f",
                  "e": ["MessageAnalysis", "MessageAnalysisContext"],
                  "d": "Интерфейсы анализа сообщений для комплексной оценки потребностей, эмоций, манипуляций и специализации"
                },
                {
                  "p": "/interfaces/needs.interfaces.ts",
                  "t": "f",
                  "e": ["CharacterNeed", "NeedsUpdateData", "Motivation", "INeed", "INeedUpdate", "INeedsService", "IMotivation", "IMotivationService"],
                  "d": "Основные интерфейсы системы потребностей и мотиваций персонажей с унифицированными типами и сервисными контрактами. Важно: перечисление CharacterNeedType должно импортироваться из /enums/character-need-type.enum.ts. Интерфейс INeed использует поле currentValue вместо устаревшего currentLevel. Интерфейс IMotivation не содержит поле description, в отличие от сущности CharacterMotivation. NeedsService.getDefaultNeedsConfig создает 10 потребностей по умолчанию, включая CONNECTION (а не SOCIAL_CONNECTION), ATTENTION, COMMUNICATION и другие. Тесты корректно работают с обоими вариантами."
                },
                {
                  "p": "/interfaces/technique.interfaces.ts",
                  "t": "f",
                  "e": ["ITechniqueResult", "ITechniqueContext", "IManipulationContext"],
                  "d": "Интерфейсы для работы с манипулятивными техниками. ITechniqueContext описывает контекст применения техники и содержит поля для идентификации персонажа, пользователя, содержания сообщения, истории разговора, эмоционального состояния и прочих параметров. ITechniqueResult содержит результаты применения техники."
                },
                {
                  "p": "/interfaces/emotional-state.interface.ts",
                  "t": "f",
                  "e": ["IEmotionalState", "IEmotionalStateUpdate", "IEmotionalContext", "EmotionalState", "IEmotionalManifestation"],
                  "d": "Интерфейсы для работы с эмоциональным состоянием персонажа. IEmotionalState описывает базовое эмоциональное состояние с полями primary, secondary, intensity и другими. EmotionalState - тип данных для использования в API."
                },
                {
                  "p": "/src/character/interfaces/behavior.interfaces.ts",
                  "t": "f",
                  "e": ["ActionTriggerContext", "IMotivation", "IBehaviorPattern", "ICharacterBehavior"],
                  "d": "Интерфейсы для работы с поведением персонажа. ActionTriggerContext включает поля для characterId, userId, triggerType, triggerData, timestamp, motivations, needsExpression, emotionalResponse и messagePrompt. Для преобразования в Record требуется использовать as unknown as Record<string, unknown>. В тестах character-behavior-action-trigger.test.ts правильно используется IMotivation без поля description, что соответствует определению интерфейса в needs.interfaces.ts."
                },
                {
                  "p": "/enums/technique.enums.ts",
                  "t": "f",
                  "e": ["ManipulativeTechniqueType", "TechniqueIntensity", "TechniquePhase"],
                  "d": "Перечисления для манипулятивных техник (PUSH_PULL, GRADUAL_INVOLVEMENT, EXCLUSIVITY_ILLUSION, EMOTIONAL_BLACKMAIL, ISOLATION, CONSTANT_VALIDATION, TROJAN_HORSE, GASLIGHTING, SNOWBALL, TRIANGULATION, LOVE_BOMBING, VALIDATION), интенсивности (SUBTLE, MODERATE, MEDIUM, AGGRESSIVE) и фаз техник (PREPARATION, EXECUTION, DEVELOPMENT, MONITORING, COMPLETION, COOLDOWN)"
                },
                {
                  "p": "/enums/character-need-type.enum.ts",
                  "t": "f",
                  "e": ["CharacterNeedType"],
                  "d": "Перечисление типов потребностей персонажа. Основной источник типов потребностей, должен использоваться для всех импортов CharacterNeedType. Включает все необходимые типы потребностей: физиологические, безопасности, социальные, признания, самоактуализации, эмоциональные, когнитивные, а также системные (FUN, USER_COMMAND, USER_REQUEST, SYSTEM)."
                },
                {
                  "p": "/enums/character-archetype.enum.ts",
                  "t": "f",
                  "e": ["CharacterArchetype"],
                  "d": "Перечисление архетипов персонажа. Включает классические архетипы Юнга (HERO, MENTOR, CAREGIVER, REBEL, LOVER, EXPLORER, CREATOR, RULER, JESTER, SAGE, INNOCENT, MAGICIAN) и дополнительные архетипы (ORPHAN, WARRIOR, SEDUCTRESS, TRICKSTER, SHADOW, GUARDIAN, ARTIST, INTELLECTUAL, COMPANION, FEMME_FATALE, ANTIHERO). Этот файл является основным источником для импорта CharacterArchetype и должен использоваться во всех частях приложения вместо устаревшего импорта из entities/character.entity."
                }
              ]
            },
            {
              "p": "/common",
              "t": "d",
              "c": [
                {
                  "p": "/common.module.ts",
                  "t": "f",
                  "e": ["CommonModule"],
                  "d": "Общий модуль с утилитами и сервисами общего назначения"
                },
                {
                  "p": "/controllers/api.controller.ts",
                  "t": "f",
                  "e": ["ApiController"],
                  "d": "Основной API контроллер с эндпоинтами health и admin/check"
                },
                {
                  "p": "/interfaces/llm-provider.interface.ts",
                  "t": "f",
                  "e": ["LLMProviderType", "ILLMProvider", "ILLMProviderManager"],
                  "d": "Общие интерфейсы для взаимодействия с LLM провайдерами"
                },
                {
                  "p": "/utils/error-handling/error-handling.service.ts",
                  "t": "f",
                  "e": ["ErrorHandlingService"],
                  "d": "Централизованный сервис обработки ошибок с логированием, мониторингом и безопасным форматированием исключений"
                },
                {
                  "p": "/utils/error-handling/error-handling.utils.ts",
                  "t": "f",
                  "e": ["withErrorHandling", "logError", "measureExecutionTime"],
                  "d": "Утилитарные функции для обработки ошибок с декораторами try-catch и измерением времени выполнения"
                },
                {
                  "p": "/utils/db/db-connection-handler.service.ts",
                  "t": "f",
                  "e": ["DbConnectionHandlerService", "DatabaseConnectionEvent", "DatabaseConnectionEventData"],
                  "d": "Сервис обработки подключений к БД с мониторингом состояния, переподключением и событийной системой"
                },
                {
                  "p": "/utils/query/query.utils.ts",
                  "t": "f",
                  "e": ["executeOptimizedQuery", "findOneOptimized", "findRelatedOptimized", "OptimizedQueryOptions", "OptimizedQueryResult"],
                  "d": "Утилиты для оптимизированных запросов к базе данных с кэшированием и performance мониторингом"
                },
                {
                  "p": "/constants/injection-tokens.ts",
                  "t": "f",
                  "e": ["CHARACTER_SERVICE", "NEEDS_SERVICE", "другие токены инъекции"],
                  "d": "Константы для инъекции зависимостей в NestJS, используемые как токены для Provider.provide"
                }
              ]
            },
            {
              "p": "/llm",
              "t": "d",
              "c": [
                {
                  "p": "/llm.module.ts",
                  "t": "f",
                  "e": ["LLMModule"],
                  "d": "Модуль интеграции с различными LLM провайдерами с системой fallback и менеджером провайдеров"
                },
                {
                  "p": "/services/llm.service.ts",
                  "t": "f",
                  "e": ["LLMService", "ILLMMessage", "LLMProviderType", "LLMMessageRole"],
                  "d": "Сервис для работы с моделями языка (LLM). Реэкспортирует интерфейсы ILLMMessage, LLMProviderType и LLMMessageRole из llm-provider.interface.ts для использования в других модулях и тестах."
                },
                {
                  "p": "/services/llm-provider-manager.service.ts",
                  "t": "f",
                  "e": ["LLMProviderManagerService"],
                  "d": "Менеджер провайдеров LLM с автоматическим выбором и fallback логикой"
                },
                {
                  "p": "/providers/openai.provider.ts",
                  "t": "f",
                  "e": ["OpenAIProviderService"],
                  "d": "OpenAI провайдер для работы с GPT моделями - реализует ILLMProvider, интегрирован с OpenAICoreService"
                },
                {
                  "p": "/providers/openai-core.service.ts",
                  "t": "f",
                  "e": ["OpenAICoreService"],
                  "d": "Базовый сервис OpenAI с интеграцией CacheService и MessageQueueService для обработки запросов к GPT API"
                },
                {
                  "p": "/providers/llama-provider.service.ts",
                  "t": "f",
                  "e": ["LlamaProviderService"],
                  "d": "Llama провайдер для работы с Llama моделями через локальные или удаленные API endpoints"
                }
              ]
            },
            {
              "p": "/prompt-template",
              "t": "d",
              "c": [
                {
                  "p": "/prompt-template.module.ts",
                  "t": "f",
                  "e": ["PromptTemplateModule"],
                  "d": "Модуль для централизованного управления шаблонами промптов"
                },
                {
                  "p": "/prompt-template.service.ts",
                  "t": "f",
                  "e": ["PromptTemplateService"],
                  "d": "Централизованная система управления промптами с версионированием, статистикой использования, оптимизацией токенов"
                }
              ]
            },
            {
              "p": "/telegram",
              "t": "d",
              "c": [
                {
                  "p": "/telegram.module.ts",
                  "t": "f",
                  "e": ["TelegramModule"],
                  "d": "Модуль Telegram с AccessControlService и CharacterCreationService"
                },
                {
                  "p": "/entities/character-settings.entity.ts",
                  "t": "f",
                  "e": ["TelegramCharacterSettings"],
                  "d": "Entity для хранения настроек персонажей в Telegram с конфигурацией автоматических действий и уведомлений"
                },
                {
                  "p": "/telegram.service.ts",
                  "t": "f",
                  "e": ["TelegramService"],
                  "d": "Основной сервис Telegram для управления ботом и обработки webhook событий с проверкой на существование bot.telegram перед вызовом методов"
                },
                {
                  "p": "/services/character-creation.service.ts",
                  "t": "f",
                  "e": ["CharacterCreationService"],
                  "d": "Специализированный сервис для создания персонажей через Telegram с предустановленными архетипами и валидацией"
                },
                {
                  "p": "/services/access-control.service.ts",
                  "t": "f",
                  "e": ["AccessControlService"],
                  "d": "Сервис контроля доступа для Telegram бота с различными режимами авторизации пользователей"
                },
                {
                  "p": "/handlers/command.handler.ts",
                  "t": "f",
                  "e": ["CommandHandler"],
                  "d": "Обработчик Telegram команд с интеграцией контроля доступа и создания персонажей"
                },
                {
                  "p": "/handlers/message.handler.ts",
                  "t": "f",
                  "e": ["MessageHandler"],
                  "d": "Обработчик Telegram сообщений с интеграцией контроля доступа и координатором обработки сообщений"
                },
                {
                  "p": "/services/message.service.ts",
                  "t": "f",
                  "e": ["MessageService"],
                  "d": "Сервис отправки сообщений в Telegram"
                }
              ]
            },
            {
              "p": "/validation",
              "t": "d",
              "c": [
                {
                  "p": "/validation.module.ts",
                  "t": "f",
                  "e": ["ValidationModule"],
                  "d": "Объединенный модуль валидации - включает валидацию сообщений, обработку ошибок, API валидацию"
                },
                {
                  "p": "/services/validation.service.ts",
                  "t": "f",
                  "e": ["ValidationService"],
                  "d": "Сервис валидации входящих данных с комплексными правилами проверки и трансформации. Содержит методы: validate, validateMany, validateWithFn, validateMessage, validateCharacterData, validateUserInput, sanitizeInput, validateApiRequest, validateConfiguration, getValidationRules, validateRequest."
                },
                {
                  "p": "/services/validation-error-handler.service.ts",
                  "t": "f",
                  "e": ["ValidationErrorHandlerService"],
                  "d": "Сервис для обработки ошибок валидации, который форматирует и логирует ошибки валидации для различных типов данных."
                }
              ]
            },
            {
              "p": "/monitoring",
              "t": "d",
              "c": [
                {
                  "p": "/monitoring.module.ts",
                  "t": "f",
                  "e": ["MonitoringModule"],
                  "d": "Модуль мониторинга с поддержкой метрик, алертов и оптимизации"
                },
                {
                  "p": "/monitoring.service.ts",
                  "t": "f",
                  "e": ["MonitoringService"],
                  "d": "Объединенный сервис мониторинга системы с поддержкой метрик базы данных и Prometheus интеграцией. Метрики экспортируются через prom-client (endpoint /monitoring/metrics)."
                },
                {
                  "p": "/services/alert.service.ts",
                  "t": "f",
                  "e": ["AlertService"],
                  "d": "Сервис управления системными алертами и уведомлениями с многоканальной доставкой"
                },
                {
                  "p": "/services/optimization.service.ts",
                  "t": "f",
                  "e": ["OptimizationService", "DatabaseOptimizationResult", "ScalingResult"],
                  "d": "Сервис оптимизации производительности базы данных и автоматического масштабирования ресурсов"
                },
                {
                  "p": "/controllers/unified-monitoring.controller.ts",
                  "t": "f",
                  "e": ["UnifiedMonitoringController"],
                  "d": "REST API контроллер для мониторинга системы с эндпоинтами метрик и состояния здоровья"
                }
              ]
            },
            {
              "p": "/dialog",
              "t": "d",
              "c": [
                {
                  "p": "/dialog.module.ts",
                  "t": "f",
                  "e": ["DialogModule"],
                  "d": "Модуль диалогов - активно используется в системе"
                },
                {
                  "p": "/services/dialog.service.ts",
                  "t": "f",
                  "e": ["DialogService", "DialogMessageType"],
                  "d": "Сервис для работы с диалогами. Поддерживает тестовый режим, при котором не требуется UserService. В интеграционных тестах рекомендуется использовать mockUserService из getDialogTestConfig(). Метод getDialogMessages возвращает массив в тестовом режиме и объект с пагинацией в продакшене. Метод getOrCreateDialog принимает telegramId типа string | number и преобразует строковые значения в числовые для внутреннего использования. Возвращает анализ сообщения, ответ персонажа и ID сообщения пользователя.",
                  "u": ["TelegramService", "UserService", "CharacterService"]
                }
              ]
            },
            {
              "p": "/user",
              "t": "d",
              "c": [
                {
                  "p": "/user.module.ts",
                  "t": "f",
                  "e": ["UserModule"],
                  "d": "Модуль пользователей"
                },
                {
                  "p": "/services/user.service.ts",
                  "t": "f",
                  "e": ["UserService"],
                  "d": "Сервис управления пользователями с CRUD операциями, системой аутентификации, кэшированием и прямым доступом к БД для актуализации данных после обновлений"
                }
              ]
            },
            {
              "p": "/cache",
              "t": "d",
              "c": [
                {
                  "p": "/cache.module.ts",
                  "t": "f",
                  "e": ["CacheModule"],
                  "d": "Модуль кеширования для всего приложения"
                },
                {
                  "p": "/cache.service.ts",
                  "t": "f",
                  "e": ["CacheService"],
                  "d": "Сервис кэширования данных с поддержкой TTL и автоматической инвалидации"
                }
              ]
            },
            {
              "p": "/message-queue",
              "t": "d",
              "c": [
                {
                  "p": "/message-queue.module.ts",
                  "t": "f",
                  "e": ["MessageQueueModule"],
                  "d": "Модуль очереди сообщений для всего приложения"
                },
                {
                  "p": "/message-queue.service.ts",
                  "t": "f",
                  "e": ["MessageQueueService"],
                  "d": "Сервис очереди сообщений для асинхронной обработки задач и межсервисной коммуникации"
                }
              ]
            },
            {
              "p": "/infrastructure",
              "t": "d",
              "c": [
                {
                  "p": "/infrastructure.module.ts",
                  "t": "f",
                  "e": ["InfrastructureModule"],
                  "d": "Модуль инфраструктурных сервисов - шифрование, API ключи"
                },
                {
                  "p": "/encryption.service.ts",
                  "t": "f",
                  "e": ["EncryptionService"],
                  "d": "Сервис криптографического шифрования данных с поддержкой AES и RSA алгоритмов"
                },
                {
                  "p": "/api-key.service.ts",
                  "t": "f",
                  "e": ["ApiKeyService"],
                  "d": "Сервис управления API ключами с генерацией, валидацией и ротацией ключей доступа. Метод extractApiKey поддерживает извлечение ключа из заголовка x-api-key и query-параметров apiKey и api_key."
                }
              ]
            },
            {
              "p": "/logging",
              "t": "d",
              "c": [
                {
                  "p": "/log.service.ts",
                  "t": "f",
                  "e": ["LogService"],
                  "d": "Централизованный сервис логирования с поддержкой различных уровней и форматов вывода"
                },
                {
                  "p": "/logging.module.ts",
                  "t": "f",
                  "e": ["LoggingModule"],
                  "d": "Модуль логирования с глобальными фильтрами исключений и HTTP middleware для трассировки запросов"
                },
                {
                  "p": "/src/logging/rollbar.service.ts",
                  "t": "f",
                  "e": ["RollbarService"],
                  "d": "Сервис для отправки логов и ошибок в Rollbar. Требует правильно настроенный ConfigService, который должен возвращать полный объект конфигурации по ключу 'logging.rollbar' со свойствами enabled, accessToken, environment, captureUncaught и captureUnhandledRejections. В тестах нужно создавать соответствующий мок ConfigService с этой структурой."
                }
              ]
            }
          ]
        },
        {
          "p": "/tester",
          "t": "d",
          "c": [
            {
              "p": "/index.ts",
              "t": "f",
              "e": ["createTestSuite", "createTest", "createBasicTest", "TestConfigType", "Tester"],
              "d": "Основной файл тестера. Начиная с шага 336 не подключает напрямую TypeOrmModule.forRoot/WinstonModule. С шага 338 полностью убрано глобальное переопределение ConfigService — конфигурация берётся из ConfigModule, а мок добавляется только при необходимости. Tester использует TestConfigurations.prepareImportsForTesting для автоматической подмены модулей (LoggingModule → MockLoggingModule, TelegrafModule → MockTelegramModule), подключения MockTypeOrmModule.forRoot и гарантированного наличия базового ConfigModule.forRoot(). requiredMocksAdder добавляет TelegrafTokenProvider и моки Log/Rollbar, поэтому тесты больше не требуют ручного указания этих провайдеров. Метод get сохраняет перегрузку для совместимости со старыми тестами."
            },
            {
              "p": "/entities.ts",
              "t": "f",
              "e": ["ALL_TEST_ENTITIES"],
              "d": "Централизованный список всех сущностей TypeORM для использования в тестовом окружении."
            },
            {
              "p": "/fixtures",
              "t": "d",
              "c": [
                {
                  "p": "/fixture-manager.ts",
                  "t": "f",
                  "e": ["FixtureManager", "ITestData", "IFixtureOptions"],
                  "d": "Менеджер тестовых фикстур с методами для создания тестовых пользователей, персонажей, диалогов и других сущностей. Поддерживает работу с числовыми ID и UUID, обеспечивая совместимость в тестах. Имеет методы numericToUuid, uuidToNumeric и ensureIdFormat для конвертации ID."
                }
              ]
            }
          ]
        },
        {
          "p": "/test",
          "t": "d",
          "c": [
            {
              "p": "/mocks",
              "t": "d",
              "c": [
                {
                  "p": "/index.ts",
                  "t": "f",
                  "e": ["MockLogService", "MockRollbarService", "createMockConfigService", "MockUserService", "MockNeedsService", "MockLlamaProviderService", "MockLLMProviderManagerService", "MockEmotionalStateService", "MockTelegramService", "MockMemoryService", "MockEventEmitter"],
                  "d": "Централизованный файл с моками для тестов, содержащий моки различных сервисов и классов для использования в интеграционных тестах."
                }
              ]
            },
            {
              "p": "/character",
              "t": "d",
              "c": [
                {
                  "p": "/manipulation-full-cycle.integration.test.ts",
                  "t": "f",
                  "d": "Полный интеграционный тест для сервиса манипулятивных техник, проверяющий весь цикл от создания профиля до выполнения техники и сохранения результатов."
                },
                {
                  "p": "/manipulation.service.integration.test.ts",
                  "t": "f",
                  "d": "Интеграционный тест для базовых операций сервиса манипулятивных техник."
                },
                {
                  "p": "/action.service.integration.test.ts",
                  "t": "f",
                  "d": "Интеграционные тесты для ActionService. Исправлен вызов метода checkActionResources на checkResourceAvailability в методе canExecuteAction для корректной проверки ресурсов."
                }
              ]
            },
            {
              "p": "/integration",
              "t": "d",
              "c": [
                {
                  "p": "/action-service.integration.test.ts",
                  "t": "f",
                  "d": "Интеграционные тесты для ActionService. Исправлен вызов метода checkActionResources на checkResourceAvailability в методе canExecuteAction для корректной проверки ресурсов."
                },
                {
                  "p": "/character-workflow.integration.test.ts",
                  "t": "f",
                  "d": "Интеграционные тесты для полного рабочего процесса взаимодействия персонажа. Добавлен параметр requiresDatabase: true и проверки на существование объектов перед обращением к их свойствам."
                },
                {
                  "p": "/specialization-workflow.integration.test.ts",
                  "t": "f",
                  "d": "Интеграционные тесты для SpecializationService. Добавлен параметр requiresDatabase: true, использован TestModuleBuilder вместо прямого создания модуля, добавлены проверки на существование объектов."
                }
              ]
            },
            {
              "p": "/message-queue",
              "t": "d",
              "c": [
                {
                  "p": "/message-queue.service.integration.test.ts",
                  "t": "f",
                  "d": "Интеграционные тесты для MessageQueueService. Исправлен тест getMessagesByStatus: добавлена остановка очереди перед добавлением сообщений, добавление нескольких сообщений, задержка для обработки и проверка статуса COMPLETED вместо PROCESSED."
                }
              ]
            },
            {
              "p": "/logging",
              "t": "d",
              "c": [
                {
                  "p": "/log.service.integration.test.ts",
                  "t": "f",
                  "d": "Интеграционные тесты для LogService. Добавлены задержки после вызова методов логирования, проверка корректной настройки моков, более подробное логирование для отладки."
                }
              ]
            }
          ]
        },
        {
          "p": "/scripts",
          "t": "d",
          "c": [
            {
              "p": "/run-manipulation-full-cycle-test.js",
              "t": "f",
              "d": "Скрипт для запуска полного цикла интеграционного теста манипулятивных техник."
            },
            {
              "p": "/run-manipulation-test.js",
              "t": "f",
              "d": "Скрипт для запуска базового интеграционного теста манипулятивных техник."
            },
            {
              "p": "/convert-tests-to-nestjs.js",
              "t": "f",
              "d": "Скрипт для конвертации тестов на прямое использование NestJS TestingModule."
            },
            {
              "p": "/fix-converted-tests.js",
              "t": "f",
              "d": "Скрипт для исправления ошибок в конвертированных тестах."
            }
          ]
        }
      ]
    }
  },
  "ks": [
    {
      "n": "TestConfigurations",
      "p": "/lib/tester/test-configurations/index.ts",
      "d": "Центральный модуль для управления тестовыми конфигурациями. Содержит унифицированную функцию requiredMocksAdder для автоматического добавления всех необходимых моков (включая ConfigService, LogService, RollbarService, Telegraf-токен и другие) на основе импортируемых в тест модулей. Функция prepareImportsForTesting автоматически заменяет TelegrafModule на MockTelegramModule.forRoot(), а LoggingModule — на MockLoggingModule.forRoot() в импортах, устраняя дублирование и упрощая настройку тестов. С версии шага 335 дополнительно помечает использование ALL_TEST_ENTITIES как deprecated и выводит предупреждение, побуждая отказаться от использования этой константы в пользу явного импорта только нужных сущностей."
    },
    {
      "n": "FixtureManager",
      "p": "/lib/tester/fixtures/fixture-manager.ts",
      "d": "Менеджер фикстур для тестов. Предоставляет методы для создания тестовых данных (пользователей, персонажей, диалогов, сообщений и т.д.). Имеет методы для очистки базы данных перед и после тестов. Содержит методы для создания различных сущностей с настраиваемыми параметрами. В методе createNeed добавлены поля growthRate, isActive и threshold для корректной работы с потребностями персонажей."
    },
    {
      "n": "CharacterService",
      "p": "/src/character/services/character.service.ts",
      "d": "Сервис для работы с персонажами. Содержит методы для создания, получения и обновления персонажей. Использует UUID для идентификации пользователей и персонажей вместо числовых ID."
    },
    {
      "n": "ActionService",
      "p": "/src/character/services/action.service.ts",
      "d": "Сервис для работы с действиями персонажей. Содержит методы для создания, выполнения и проверки возможности выполнения действий. Поддерживает различные типы действий, включая REST, SEND_MESSAGE и другие. Требует правильной инициализации зависимостей, включая NeedsService и MemoryService."
    },
    {
      "n": "character.service.test.ts",
      "p": "/test/character/character.service.test.ts",
      "d": "Тесты для CharacterService. Проверяют создание, получение и обновление персонажей. Исправлены проблемы с типизацией, теперь корректно работает с userId как строкой (UUID)."
    },
    {
      "n": "action.service.integration.test.ts",
      "p": "/test/character/action.service.integration.test.ts",
      "d": "Интеграционные тесты для ActionService. Проверяют создание действий, их выполнение и обработку триггеров. Исправлены проблемы с инициализацией зависимостей (NeedsService и MemoryService) и с проверкой результатов выполнения действий. Для тестирования используется действие типа REST вместо SEND_MESSAGE, так как оно не требует наличия активного чата."
    }
  ],
  "steps": [
    {
      "n": "Исправление проблем с типизацией в тестах CharacterService",
      "d": "Исправлены проблемы с типизацией в тестах CharacterService, связанные с использованием userId как строки (UUID) вместо числа. Добавлены правильные типы и проверки для userId."
    },
    {
      "n": "Исправление интеграционных тестов ActionService",
      "d": "Исправлены интеграционные тесты ActionService. Основные проблемы были связаны с инициализацией зависимостей (NeedsService и MemoryService) и с типом действия (SEND_MESSAGE требует активного чата). Решение: использовать действие типа REST, которое не требует активного чата, и вручную устанавливать зависимости через Object.defineProperty. Также исправлен метод createNeed в FixtureManager, добавлены поля growthRate, isActive и threshold."
    }
  ]
}

