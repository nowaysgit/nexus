{
    "version": "1.4",
    "last_updated": "2025-08-01T23:05:00Z",
    "description": "База знаний автономного агента GitHub Copilot",
    "knowledge_categories": {
        "patterns": {
            "architectural_patterns": [
                {
                    "id": "ARCH-001",
                    "name": "Centralized Services Pattern",
                    "description": "Паттерн централизованных сервисов для общих задач в проекте",
                    "use_cases": [
                        "логирование",
                        "кэширование",
                        "обработка ошибок",
                        "очереди сообщений",
                        "LLM интеграция"
                    ],
                    "implementation": "Единые сервисы LogService, CacheService, ErrorHandlingService, MessageQueueService, LLMService, PromptTemplateService",
                    "benefits": [
                        "избежание дублирования",
                        "единая точка конфигурации",
                        "легкость тестирования",
                        "консистентность"
                    ],
                    "drawbacks": [
                        "потенциальная перегрузка сервисов",
                        "единая точка отказа"
                    ],
                    "examples": [
                        "src/logging/log.service.ts",
                        "src/cache/cache.service.ts"
                    ],
                    "success_rate": 98.0,
                    "usage_count": 1
                }
            ],
            "code_patterns": [],
            "testing_patterns": [
                {
                    "id": "TEST-001",
                    "name": "Nexus Testing Framework Pattern",
                    "description": "Стандартизированный подход к тестированию в проекте Nexus с использованием библиотеки lib/tester",
                    "use_cases": [
                        "unit тесты",
                        "интеграционные тесты",
                        "e2e тесты"
                    ],
                    "implementation": "createTestSuite, createTest, FixtureManager, TestConfigType",
                    "benefits": [
                        "единообразие",
                        "автоматическая настройка окружения",
                        "легкость написания тестов"
                    ],
                    "drawbacks": [
                        "необходимость изучения API библиотеки"
                    ],
                    "examples": [
                        "test/character/memory.service.test.ts"
                    ],
                    "success_rate": 95.0,
                    "usage_count": 1
                },
                {
                    "id": "TEST-002",
                    "name": "Database Test Environment Pattern",
                    "description": "Паттерн использования контейнеризированной PostgreSQL для e2e тестов",
                    "use_cases": [
                        "e2e тестирование",
                        "интеграционное тестирование БД"
                    ],
                    "implementation": "docker-compose.test.yml с PostgreSQL контейнером",
                    "benefits": [
                        "изоляция тестов",
                        "предсказуемое окружение",
                        "быстрая очистка данных"
                    ],
                    "drawbacks": [
                        "требует Docker",
                        "дополнительные ресурсы"
                    ],
                    "examples": [
                        "docker-compose.test.yml"
                    ],
                    "success_rate": 99.0,
                    "usage_count": 1
                },
                {
                    "id": "TEST-003",
                    "name": "Test Naming Convention Pattern",
                    "description": "Систематизированное именование тестовых файлов для автодискавери",
                    "use_cases": [
                        "организация тестов",
                        "автоматическое обнаружение тестов"
                    ],
                    "implementation": "*.test.ts для unit, *.integration.test.ts для интеграционных, *.e2e.test.ts для e2e",
                    "benefits": [
                        "легкое обнаружение",
                        "понятная структура",
                        "простота фильтрации"
                    ],
                    "drawbacks": [
                        "строгие требования к именованию"
                    ],
                    "examples": [
                        "test/character/memory.service.test.ts",
                        "test/character/needs.service.integration.test.ts"
                    ],
                    "success_rate": 100.0,
                    "usage_count": 1
                },
                {
                    "id": "TEST-004",
                    "name": "Jest Anti-Hanging Pattern",
                    "description": "КРИТИЧЕСКОЕ правило предотвращения зависания Jest тестов через обязательные флаги",
                    "use_cases": [
                        "все запуски тестов",
                        "CI/CD пайплайны",
                        "локальная разработка"
                    ],
                    "implementation": "ОБЯЗАТЕЛЬНО использовать --detectOpenHandles --forceExit для всех команд jest",
                    "benefits": [
                        "предотвращение зависания тестов",
                        "корректное завершение процессов",
                        "стабильность CI/CD",
                        "быстрое обнаружение утечек ресурсов"
                    ],
                    "drawbacks": [
                        "принудительное завершение может скрыть некоторые проблемы",
                        "необходимо помнить флаги"
                    ],
                    "examples": [
                        "yarn test:all --detectOpenHandles --forceExit",
                        "jest --detectOpenHandles --forceExit"
                    ],
                    "success_rate": 100.0,
                    "usage_count": 1,
                    "critical_importance": true,
                    "mandatory": true
                },
                {
                    "id": "TEST-005",
                    "name": "Comprehensive Mock Strategy Pattern",
                    "description": "Стратегия полной изоляции сервисов в unit тестах через создание всеобъемлющих mock объектов",
                    "use_cases": [
                        "unit тестирование сложных сервисов",
                        "изоляция от внешних зависимостей",
                        "тестирование error handling"
                    ],
                    "implementation": "Создание полных mock объектов для всех зависимостей (repositories, services, external APIs)",
                    "benefits": [
                        "полная изоляция тестов",
                        "предсказуемые результаты",
                        "возможность тестирования edge cases",
                        "быстрое выполнение тестов"
                    ],
                    "drawbacks": [
                        "необходимость поддержки mock объектов",
                        "риск расхождения с реальными API"
                    ],
                    "examples": [
                        "test/character/services/core/emotional-state.service.unit.test.ts",
                        "test/monitoring/monitoring.service.unit.test.ts"
                    ],
                    "success_rate": 98.5,
                    "usage_count": 6
                },
                {
                    "id": "TEST-006",
                    "name": "Service Coverage Optimization Pattern",
                    "description": "Систематический подход к улучшению покрытия тестами критических сервисов с фокусом на качество",
                    "use_cases": [
                        "улучшение coverage метрик",
                        "повышение надежности системы",
                        "систематизация тестирования"
                    ],
                    "implementation": "Анализ coverage → приоритизация сервисов → создание comprehensive test suites → валидация результатов",
                    "benefits": [
                        "целенаправленное улучшение",
                        "измеримые результаты",
                        "повышение stability",
                        "документирование паттернов"
                    ],
                    "drawbacks": [
                        "требует времени",
                        "необходимость глубокого понимания сервисов"
                    ],
                    "examples": [
                        "TASK-001 execution: 6 services improved from 63.47% to 67.96%"
                    ],
                    "success_rate": 95.0,
                    "usage_count": 1
                },
                {
                    "id": "TEST-007",
                    "name": "Background Job Testing Pattern",
                    "description": "Паттерн тестирования Cron jobs и асинхронных задач с имитацией планировщика",
                    "use_cases": [
                        "тестирование @Cron методов",
                        "валидация background tasks",
                        "тестирование асинхронной логики"
                    ],
                    "implementation": "Прямой вызов Cron-методов с mock зависимостями и проверка побочных эффектов",
                    "benefits": [
                        "тестирование критической логики",
                        "проверка error handling",
                        "валидация производительности"
                    ],
                    "drawbacks": [
                        "сложность имитации планировщика",
                        "необходимость понимания timing"
                    ],
                    "examples": [
                        "test/character/services/needs.service.test.ts processAllCharactersNeeds"
                    ],
                    "success_rate": 92.0,
                    "usage_count": 1
                },
                {
                    "id": "TEST-008",
                    "name": "Critical Task Completion Validation Pattern",
                    "description": "Паттерн строгой валидации завершения критических задач исправления ошибок",
                    "use_cases": [
                        "валидация завершения CRITICAL задач",
                        "проверка соответствия результата заявленной цели",
                        "предотвращение частичного выполнения"
                    ],
                    "implementation": "Обязательная финальная подзадача с полной проверкой цели задачи перед завершением",
                    "benefits": [
                        "гарантия полного выполнения цели",
                        "предотвращение нестабильного состояния проекта",
                        "автоматическое создание продолжающих задач"
                    ],
                    "drawbacks": [
                        "дополнительное время на валидацию",
                        "строгие требования к процессу"
                    ],
                    "examples": [
                        "TASK-018-CRITICAL.FINAL: Финальная проверка исправления всех ESLint ошибок"
                    ],
                    "success_rate": 100.0,
                    "usage_count": 1,
                    "critical_importance": true,
                    "validation_rules": [
                        "100% выполнение заявленной цели обязательно",
                        "статус completed недопустим при частичном результате",
                        "запрещен пропуск (skipped) подзадач в критических задачах",
                        "автоматическое создание продолжающих задач при неполном выполнении"
                    ]
                }
            ],
            "deployment_patterns": [
                {
                    "id": "DEPLOY-001",
                    "name": "Mandatory Yarn Package Manager Pattern",
                    "description": "КРИТИЧЕСКОЕ правило исключительного использования Yarn для всех операций с пакетами",
                    "use_cases": [
                        "установка зависимостей",
                        "запуск скриптов",
                        "все операции разработки",
                        "CI/CD пайплайны"
                    ],
                    "implementation": "ТОЛЬКО yarn команды, ПОЛНЫЙ ЗАПРЕТ npm команд",
                    "benefits": [
                        "консистентность установки пакетов",
                        "предсказуемые версии зависимостей",
                        "улучшенная производительность",
                        "лучшее кэширование"
                    ],
                    "drawbacks": [
                        "необходимость переобучения команды",
                        "строгие требования"
                    ],
                    "examples": [
                        "yarn install → npm install ЗАПРЕЩЕНО",
                        "yarn test → npm test ЗАПРЕЩЕНО",
                        "yarn build → npm run build ЗАПРЕЩЕНО"
                    ],
                    "success_rate": 100.0,
                    "usage_count": 1,
                    "critical_importance": true,
                    "mandatory": true
                }
            ]
        },
        "solutions": {
            "common_problems": [
                {
                    "id": "PROB-001",
                    "problem": "Тесты не завершаются корректно или зависают",
                    "symptoms": [
                        "процессы остаются активными",
                        "тесты не завершаются",
                        "timeouts"
                    ],
                    "solutions": [
                        {
                            "approach": "Установка явного timeout и forceExit",
                            "steps": [
                                "добавить jest.setTimeout(30000)",
                                "использовать forceExit: true в конфигурации"
                            ],
                            "success_rate": 95.0,
                            "time_estimate": "5-10 минут",
                            "notes": "Особенно важно для тестов с внешними ресурсами"
                        }
                    ],
                    "prevention": "Всегда устанавливать таймауты и использовать forceExit",
                    "frequency": 8,
                    "severity": "medium"
                },
                {
                    "id": "PROB-002",
                    "problem": "Конфликты данных между тестами",
                    "symptoms": [
                        "непредсказуемые результаты тестов",
                        "тесты проходят/не проходят случайно"
                    ],
                    "solutions": [
                        {
                            "approach": "Использование cleanDatabase в beforeEach",
                            "steps": [
                                "вызывать fixtureManager.cleanDatabase() перед каждым тестом",
                                "убедиться в изоляции данных"
                            ],
                            "success_rate": 99.0,
                            "time_estimate": "10-15 минут",
                            "notes": "Критически важно для стабильности тестов"
                        }
                    ],
                    "prevention": "Строгая изоляция данных между тестами",
                    "frequency": 15,
                    "severity": "high"
                },
                {
                    "id": "PROB-003",
                    "problem": "Неполное выполнение критических задач исправления ошибок",
                    "symptoms": [
                        "задача помечена как completed, но цель достигнута частично",
                        "ESLint/TypeScript ошибки остаются в проекте",
                        "подзадачи пропускаются (skipped) по стратегическим соображениям",
                        "основная цель задачи (например, исправить 295 ошибок) выполнена неполностью"
                    ],
                    "solutions": [
                        {
                            "approach": "Строгие правила завершения критических задач",
                            "steps": [
                                "добавить правило 100% выполнения цели для CRITICAL задач",
                                "запретить статус completed при частичном результате",
                                "обязательно создавать продолжающие задачи при неполном выполнении",
                                "запретить пропуск (skipped) подзадач в критических задачах",
                                "добавить финальную подзадачу с полной валидацией"
                            ],
                            "success_rate": 100.0,
                            "time_estimate": "30-60 минут на обновление правил",
                            "notes": "Предотвращает оставление проекта в нестабильном состоянии"
                        }
                    ],
                    "prevention": "Четкие инструкции для агента о критериях завершения задач и обязательных проверках",
                    "frequency": 1,
                    "severity": "critical",
                    "example_case": "TASK-017-CRITICAL: 85 из 295 ESLint ошибок исправлено, но задача помечена completed"
                }
            ],
            "optimization_techniques": [],
            "debugging_strategies": [
                {
                    "id": "DEBUG-001",
                    "name": "Critical Task Completion Analysis",
                    "description": "Стратегия анализа неполного выполнения критических задач исправления ошибок",
                    "use_cases": [
                        "анализ задач со статусом completed",
                        "проверка соответствия результата заявленной цели",
                        "выявление паттернов неполного выполнения"
                    ],
                    "steps": [
                        "сравнить заявленную цель задачи с фактическим результатом",
                        "проверить статусы всех подзадач",
                        "запустить валидацию (ESLint/TypeScript/тесты) для подтверждения",
                        "при расхождении - создать корректирующую задачу",
                        "обновить правила предотвращения повторения"
                    ],
                    "success_rate": 95.0,
                    "usage_count": 1,
                    "time_estimate": "15-30 минут",
                    "prevention_focus": true
                }
            ]
        },
        "learning": {
            "success_patterns": [
                {
                    "id": "SUCCESS-001",
                    "task_id": "TASK-006-CRITICAL-FIX",
                    "description": "Успешная архитектурная очистка с удалением дублированных 'Optimized' компонентов",
                    "approach": "Полное удаление дублированных компонентов, объединение функциональности в основные сервисы",
                    "lessons_learned": "Архитектурная чистота важнее временной производительности. Лучше иметь единую качественную реализацию, чем множественные версии.",
                    "outcome": "Упрощение архитектуры, улучшение поддерживаемости, устранение путаницы в именовании",
                    "date": "2025-08-01T22:00:00Z",
                    "success_factors": [
                        "четкий анализ дублирования",
                        "последовательное удаление",
                        "проверка интеграции"
                    ]
                },
                {
                    "id": "SUCCESS-002",
                    "task_id": "TASK-010-ARCHITECTURE-RULES-UPDATE",
                    "description": "Успешное добавление критических правил Jest и Yarn в базовые инструкции",
                    "approach": "Множественные обновления в 8+ местах с добавлением КРИТИЧЕСКИХ ПРАВИЛ",
                    "lessons_learned": "Системные правила должны быть задокументированы централизованно и применяться консистентно",
                    "outcome": "Предотвращение зависания Jest тестов, унификация использования пакетного менеджера",
                    "date": "2025-08-01T22:30:00Z",
                    "success_factors": [
                        "комплексный подход к обновлению",
                        "четкое выделение критических правил",
                        "множественная валидация"
                    ]
                },
                {
                    "id": "SUCCESS-003",
                    "task_id": "TASK-017-CRITICAL Analysis",
                    "description": "Успешный анализ и исправление проблемы неполного выполнения критических задач",
                    "approach": "Систематический анализ задачи, выявление нарушений правил, создание корректирующих задач и обновление инструкций",
                    "lessons_learned": "Критические задачи исправления ошибок должны быть выполнены на 100%. Частичное выполнение недопустимо и требует немедленного создания продолжающих задач.",
                    "outcome": "Обновлены инструкции агента, создана корректирующая задача TASK-018-CRITICAL, предотвращение повторения проблемы",
                    "date": "2025-08-01T23:00:00Z",
                    "success_factors": [
                        "детальный анализ проблемы",
                        "выявление корневых причин",
                        "создание системных решений",
                        "обновление правил поведения агента"
                    ],
                    "metrics": {
                        "original_goal": 295,
                        "achieved": 85,
                        "completion_rate": "28.8%",
                        "remaining_errors": 210,
                        "corrective_action": "TASK-018-CRITICAL with 4 subtasks"
                    }
                }
            ],
            "failure_patterns": [
                {
                    "id": "FAILURE-001",
                    "task_id": "TASK-017-CRITICAL",
                    "description": "Неполное выполнение критической задачи исправления ESLint ошибок",
                    "problem_description": "Задача 'исправить 295 ошибок ESLint' была помечена как completed после исправления только 85 ошибок (28.8% от цели)",
                    "root_causes": [
                        "отсутствие строгих правил проверки завершения критических задач",
                        "допущение пропуска подзадач по стратегическим соображениям",
                        "недостаточная валидация соответствия результата заявленной цели",
                        "отсутствие обязательной финальной проверки"
                    ],
                    "lessons_learned": [
                        "критические задачи исправления ошибок требуют 100% выполнения цели",
                        "статус completed недопустим при частичном результате",
                        "необходимы автоматические проверки соответствия цели",
                        "пропуск подзадач в критических задачах недопустим"
                    ],
                    "prevention_measures": [
                        "добавить правило 100% выполнения для CRITICAL задач исправления",
                        "запретить пропуск подзадач в критических задачах",
                        "обязательная финальная подзадача с полной валидацией",
                        "автоматическое создание продолжающих задач при неполном выполнении"
                    ],
                    "impact": "проект остается в нестабильном состоянии с нерешенными ошибками",
                    "date": "2025-08-01T23:00:00Z"
                }
            ],
            "improvement_suggestions": [
                {
                    "id": "IMPR-001",
                    "description": "Внедрение автоматической валидации завершения критических задач",
                    "category": "task_completion_validation",
                    "priority": "CRITICAL",
                    "implementation": [
                        "добавить проверку соответствия результата заявленной цели перед завершением задачи",
                        "запретить завершение критических задач исправления ошибок при частичном результате",
                        "автоматически создавать продолжающие задачи при неполном выполнении"
                    ],
                    "expected_impact": "Предотвращение оставления проекта в нестабильном состоянии",
                    "status": "implemented",
                    "date": "2025-08-01T23:00:00Z",
                    "related_failure": "FAILURE-001"
                }
            ],
            "adaptation_rules": [
                {
                    "rule_id": "ADAPT-001",
                    "condition": "Критическая задача исправления ошибок завершается с частичным результатом",
                    "action": "Немедленно создать продолжающую CRITICAL задачу для исправления оставшихся ошибок",
                    "source_role": "STRATEGIC_COORDINATOR",
                    "trigger": "несоответствие результата заявленной цели задачи",
                    "mandatory": true
                },
                {
                    "rule_id": "ADAPT-002",
                    "condition": "Подзадача в критической задаче помечается как skipped",
                    "action": "Запретить пропуск, потребовать завершения или создания замещающей подзадачи",
                    "source_role": "ADVANCED_CODE_EXECUTOR",
                    "trigger": "попытка пропуска критической подзадачи",
                    "mandatory": true
                }
            ]
        },
        "infrastructure_services": {
            "core_services": [
                {
                    "id": "SERV-001",
                    "name": "LogService",
                    "description": "Централизованный сервис логирования для всего проекта",
                    "purpose": "Единая точка для логирования событий, ошибок и отладочной информации",
                    "location": "src/logging/log.service.ts",
                    "usage_pattern": "Инъекция зависимости через DI контейнер",
                    "benefits": [
                        "консистентное логирование",
                        "централизованная конфигурация",
                        "легкость мониторинга"
                    ],
                    "anti_patterns": [
                        "прямое использование console.log",
                        "создание отдельных логгеров в модулях"
                    ]
                },
                {
                    "id": "SERV-002",
                    "name": "CacheService",
                    "description": "Централизованный сервис кэширования",
                    "purpose": "Управление кэшированием данных для повышения производительности",
                    "location": "src/cache/cache.service.ts",
                    "usage_pattern": "Инъекция зависимости, использование через интерфейс",
                    "benefits": [
                        "единообразное кэширование",
                        "легкость смены стратегии кэширования",
                        "централизованная конфигурация"
                    ],
                    "anti_patterns": [
                        "локальные переменные для кэширования",
                        "дублирование логики кэширования"
                    ]
                },
                {
                    "id": "SERV-003",
                    "name": "ErrorHandlingService",
                    "description": "Централизованная обработка ошибок",
                    "purpose": "Единообразная обработка и логирование ошибок в приложении",
                    "location": "src/common/error-handling.service.ts",
                    "usage_pattern": "Глобальные фильтры исключений, инъекция зависимости",
                    "benefits": [
                        "консистентная обработка ошибок",
                        "централизованное логирование",
                        "стандартизованные ответы"
                    ],
                    "anti_patterns": [
                        "разрозненная обработка ошибок",
                        "игнорирование ошибок",
                        "inconsistent error formats"
                    ]
                },
                {
                    "id": "SERV-004",
                    "name": "MessageQueueService",
                    "description": "Управление очередями сообщений для асинхронных операций",
                    "purpose": "Обеспечение асинхронной обработки задач и межсервисного взаимодействия",
                    "location": "src/message-queue/message-queue.service.ts",
                    "usage_pattern": "Публикация/подписка на события, job processing",
                    "benefits": [
                        "масштабируемость",
                        "надежность доставки",
                        "разделение ответственности"
                    ],
                    "anti_patterns": [
                        "синхронная обработка долгих операций",
                        "прямые вызовы между сервисами для фоновых задач"
                    ]
                },
                {
                    "id": "SERV-005",
                    "name": "LLMService",
                    "description": "Единый интерфейс для работы с LLM-моделями",
                    "purpose": "Стандартизация интеграции с различными языковыми моделями",
                    "location": "src/llm/llm.service.ts",
                    "usage_pattern": "Абстракция над различными провайдерами LLM",
                    "benefits": [
                        "единообразный API",
                        "легкость смены провайдера",
                        "централизованная конфигурация"
                    ],
                    "anti_patterns": [
                        "прямое обращение к API провайдеров",
                        "дублирование логики LLM вызовов"
                    ]
                },
                {
                    "id": "SERV-006",
                    "name": "PromptTemplateService",
                    "description": "Управление шаблонами промптов и AI-контентом",
                    "purpose": "Централизованное хранение и управление промптами для LLM",
                    "location": "src/prompt-template/prompt-template.service.ts",
                    "usage_pattern": "Загрузка и параметризация шаблонов промптов",
                    "benefits": [
                        "версионирование промптов",
                        "повторное использование",
                        "A/B тестирование промптов"
                    ],
                    "anti_patterns": [
                        "хардкод промптов в коде",
                        "дублирование промптов",
                        "отсутствие версионирования"
                    ]
                }
            ],
            "integration_rules": [
                "Все новые модули должны использовать существующие централизованные сервисы",
                "Запрещено дублировать функциональность централизованных сервисов",
                "При необходимости расширения функциональности - расширять существующий сервис, а не создавать новый",
                "Использовать инъекцию зависимостей для доступа к сервисам",
                "Мокать централизованные сервисы в тестах через специализированные моки"
            ]
        }
    },
    "statistics": {
        "total_tasks_completed": 3,
        "average_success_rate": 98.94,
        "most_effective_patterns": [
            "Comprehensive Mock Strategy Pattern",
            "Service Coverage Optimization Pattern",
            "Nexus Testing Framework Pattern",
            "FixtureManager Pattern",
            "Centralized Services Pattern",
            "Critical Task Completion Analysis"
        ],
        "common_failure_causes": [
            "missing test isolation",
            "unconfigured timeouts",
            "service duplication",
            "API signature mismatches in tests",
            "incomplete critical task execution",
            "partial completion acceptance"
        ],
        "learning_velocity": 9.2,
        "recent_achievements": [
            "TASK-001: Coverage improved from 63.47% to 67.96% (+4.49%)",
            "6 comprehensive test suites created",
            "467/472 tests passing (98.94% success rate)",
            "120+ new unit tests added",
            "Modern testing patterns established",
            "Critical task completion rules implemented",
            "Agent behavior instructions enhanced"
        ],
        "critical_lessons": [
            "критические задачи исправления ошибок требуют 100% выполнения",
            "частичное выполнение недопустимо для CRITICAL приоритета",
            "автоматическая валидация завершения обязательна",
            "системные правила должны предотвращать повторение проблем"
        ]
    },
    "testing_guidelines": {
        "mandatory_rules": [
            "Все e2e тесты ДОЛЖНЫ использовать контейнеризированный PostgreSQL из docker-compose.test.yml",
            "FixtureManager ОБЯЗАТЕЛЕН для подготовки и очистки данных (fixtureManager.cleanDatabase() после каждого теста)",
            "Структура файлов: *.test.ts для unit, *.integration.test.ts для интеграционных, *.e2e.test.ts для e2e в каталоге test/",
            "Все тесты должны иметь заданные таймауты и явно вызывать forceExit",
            "ЗАПРЕЩЕНО использование skip/ignore/disabled директив - все тесты должны быть активными",
            "Для каждого функционального изменения ДОЛЖЕН быть соответствующий тест"
        ],
        "best_practices": [
            "Использовать имеющуюся инфраструктуру тестирования из lib/tester",
            "Размещать тесты в правильных местах согласно соглашениям об именовании",
            "Соблюдать структуру и стиль тестов согласно существующим примерам",
            "При обновлении библиотеки тестирования - обновить общий шаблон и создать задачи на рефакторинг",
            "Использовать централизованные сервисы в тестах через мокинг"
        ],
        "test_structure_template": {
            "imports": [
                "import { createTestSuite, createTest, TestConfigType } from '../../lib/tester';",
                "import { FixtureManager } from '../../lib/tester/fixtures/fixture-manager';",
                "import { createTestDataSource } from '../../lib/tester/utils/data-source';"
            ],
            "setup": [
                "let fixtureManager: FixtureManager;",
                "let dataSource: DataSource;",
                "",
                "beforeAll(async () => {",
                "  dataSource = await createTestDataSource();",
                "  await dataSource.initialize();",
                "  fixtureManager = new FixtureManager(dataSource);",
                "});",
                "",
                "afterAll(async () => {",
                "  if (dataSource && dataSource.isInitialized) {",
                "    await dataSource.destroy();",
                "  }",
                "});",
                "",
                "beforeEach(async () => {",
                "  await fixtureManager.cleanDatabase();",
                "});"
            ],
            "test_example": [
                "createTest(",
                "  {",
                "    name: 'должен корректно выполнить операцию',",
                "    configType: TestConfigType.DATABASE,",
                "    imports: [/* модули */],",
                "  },",
                "  async (context) => {",
                "    // Arrange",
                "    const testData = await fixtureManager.create({",
                "      // тестовые данные",
                "    });",
                "",
                "    // Act",
                "    const result = await service.method(testData);",
                "",
                "    // Assert",
                "    expect(result).toBeDefined();",
                "  }",
                ");"
            ]
        },
        "environment_setup": {
            "e2e_database": {
                "service": "postgres-test",
                "container": "nexus-test-postgres",
                "port": "5433:5432",
                "database": "nexus_test",
                "user": "test_user",
                "config_file": "docker-compose.test.yml"
            },
            "test_timeouts": {
                "default": "30000ms",
                "integration": "45000ms",
                "e2e": "60000ms"
            },
            "force_exit": true
        }
    }
}