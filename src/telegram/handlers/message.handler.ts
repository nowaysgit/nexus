import { Injectable, Logger } from '@nestjs/common';
import { Context } from '../interfaces/context.interface';
import { SessionService } from '../services/session.service';
import { AccessService } from '../services/access.service';
import { MessageService } from '../services/message.service';
import { CharacterService } from '../services/character.service';
import { OpenAIService } from '../../openai/openai.service';
import { DialogService } from '../../dialog/services/dialog.service';
import { NeedsService } from '../../character/services/needs.service';
import { CharacterActionService } from '../services/character-action.service';
import { CharacterBehaviorService } from '../../character/services/character-behavior.service';

@Injectable()
export class MessageHandler {
  private readonly logger = new Logger(MessageHandler.name);

  constructor(
    private sessionService: SessionService,
    private accessService: AccessService,
    private messageService: MessageService,
    private characterService: CharacterService,
    private openaiService: OpenAIService,
    private dialogService: DialogService,
    private needsService: NeedsService,
    private characterActionService: CharacterActionService,
    private characterBehaviorService: CharacterBehaviorService,
  ) {}

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleMessage(ctx: Context): Promise<void> {
    try {
      const messageText = ctx.message.text;
      const currentState = this.sessionService.getState(ctx);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
      if (currentState === 'waiting_for_access_key') {
        await this.handleAccessKeyInput(ctx, messageText);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const hasAccess = await this.accessService.checkAccess(ctx);
      if (!hasAccess) {
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      if (messageText === 'üë• –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏') {
        await this.characterService.showUserCharacters(ctx);
        return;
      } else if (messageText === '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞') {
        await ctx.reply(
          '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.',
        );
        return;
      } else if (messageText === '‚ùì –ü–æ–º–æ—â—å') {
        await this.messageService.sendHelpMessage(ctx);
        return;
      } else if (messageText === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
        await ctx.reply('–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
      if (currentState === 'chatting') {
        await this.handleCharacterChat(ctx, messageText);
        return;
      }

      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
      await ctx.reply(
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:\n' +
          '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
          '/characters - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n' +
          '/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n' +
          '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
  private async handleAccessKeyInput(
    ctx: Context,
    keyValue: string,
  ): Promise<void> {
    try {
      await this.accessService.validateAccessKey(ctx, keyValue);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
  private async handleCharacterChat(
    ctx: Context,
    userMessage: string,
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
      const characterId = ctx.session.data.activeCharacterId;
      const userId = ctx.from.id;

      if (!characterId) {
        await ctx.reply(
          '–û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–Ω–æ–≤–∞.',
        );
        this.sessionService.clearSessionForUser(ctx);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      if (userMessage === '/stop' || userMessage === 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ') {
        await ctx.reply('–û–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
        await this.messageService.sendMainMenu(ctx);
        this.sessionService.updateSessionData(ctx, { activeCharacterId: null });
        this.sessionService.transitionToState(ctx, 'main');
        // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
        this.characterActionService.removeActiveConversation(userId);
        return;
      }

      if (userMessage === 'üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞') {
        const character =
          await this.characterService.getCharacterById(characterId);
        await this.messageService.sendCharacterStatus(ctx, character);
        return;
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
      this.characterActionService.registerActiveConversation(
        userId,
        characterId,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–≤–µ—Ç–∏—Ç—å (—É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
      // –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è
      const wasHandled =
        await this.characterActionService.handleMessageWithActionContext(
          ctx,
          userId,
          characterId,
          userMessage,
        );

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —É—á–µ—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      if (wasHandled) {
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const character =
        await this.characterService.getCharacterById(characterId);

      if (!character) {
        await ctx.reply(
          '–û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–Ω–æ–≤–∞.',
        );
        this.sessionService.clearSessionForUser(ctx);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥
      const telegramId = ctx.from.id.toString();
      const dialogMessage = await this.dialogService.saveUserMessage(
        telegramId,
        characterId,
        userMessage,
      );

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CharacterBehaviorService
      // –≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      await this.characterBehaviorService.processUserMessage(
        characterId,
        userMessage,
      );

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
      const behaviorContext =
        await this.characterBehaviorService.getBehaviorContextForResponse(
          characterId,
        );

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
      const characterResponse = await this.generateCharacterResponse(
        character,
        userMessage,
        dialogMessage.id,
        behaviorContext.emotionalState,
        behaviorContext.motivations,
        behaviorContext.currentAction
          ? `${behaviorContext.currentAction.description}`
          : '',
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      await ctx.reply(characterResponse);
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ: ${error.message}`,
      );
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É—á–µ—Ç–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–π
  private async generateCharacterResponse(
    character: any,
    userMessage: string,
    userMessageId: number,
    emotionalState: any,
    motivations: any[],
    actionContext: string,
  ): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
      const telegramId = String(character.userId || '');
      const formattedHistory =
        await this.dialogService.getFormattedDialogHistoryForAI(
          telegramId,
          character.id,
          20,
        );

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
      let emotionalStateText = '';
      if (emotionalState) {
        emotionalStateText = `–¢–≤–æ–µ —Ç–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${emotionalState.description || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'}. 
        –û—Å–Ω–æ–≤–Ω–∞—è —ç–º–æ—Ü–∏—è: ${emotionalState.primary || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å'}, 
        –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${emotionalState.intensity || '0'}%.`;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è–º–∏
      let motivationsText = '';
      if (motivations && motivations.length > 0) {
        motivationsText =
          '–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏:\n' +
          motivations
            .slice(0, 3)
            .map(
              (m) =>
                `- ${m.needType}: ${m.actionImpulse} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${m.priority})`,
            )
            .join('\n');
      }

      // –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
      const systemPrompt = `
      –¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏ ${character.name}. 
      ${character.personality ? `–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å: ${character.personality}` : ''}
      ${character.biography ? `–¢–≤–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è: ${character.biography}` : ''}
      ${character.appearance ? `–¢–≤–æ—è –≤–Ω–µ—à–Ω–æ—Å—Ç—å: ${character.appearance}` : ''}
      –ê—Ä—Ö–µ—Ç–∏–ø: ${character.archetype}

      ${emotionalStateText}
      
      ${motivationsText}
      
      ${actionContext ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è: ${actionContext}` : ''}

      –û—Ç–≤–µ—á–∞–π –æ—Ç –ª–∏—Ü–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Ç–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.`;

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
      const response = await this.openaiService.createChatCompletion({
        messages: [
          {
            role: 'system',
            content: systemPrompt,
          },
          ...formattedHistory,
          {
            role: 'user',
            content: userMessage,
          },
        ],
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
      const responseText = response.choices[0].message.content;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥
      await this.dialogService.saveCharacterMessage(
        userMessageId,
        responseText,
      );

      return responseText;
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${error.message}`,
      );
      return '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ß—Ç–æ-—Ç–æ –º–µ—à–∞–µ—Ç –º–æ–∏–º –º—ã—Å–ª—è–º...';
    }
  }
}
