import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { LogService } from '../../logging/log.service';
import { BaseService } from '../../common/base/base.service';
import { getErrorMessage } from '../../common/utils/error.utils';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö
 */
export interface ParsedCallback {
  action: string;
  entityId?: string;
  subAction?: string;
  params?: Record<string, any>;
}

/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
 * –í–∫–ª—é—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –¥–∏–∞–ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
@Injectable()
export class CallbackHandler extends BaseService {
  constructor(logService: LogService) {
    super(logService);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback query
   */
  async handleCallback(ctx: Context): Promise<void> {
    try {
      if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
        return;
      }

      const callbackData = this.parseCallbackData(ctx.callbackQuery.data);

      this.logDebug('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback', {
        userId: ctx.from?.id,
        action: callbackData.action,
        entityId: callbackData.entityId,
      });

      switch (callbackData.action) {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        case 'main_menu':
          await this.handleMainMenu(ctx);
          break;
        case 'my_characters':
          await this.handleMyCharacters(ctx);
          break;
        case 'create_character':
          await this.handleCreateCharacter(ctx);
          break;
        case 'help':
          await this.handleHelp(ctx);
          break;

        // –î–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
        case 'char':
          await this.handleCharacterAction(ctx, callbackData);
          break;

        // –î–∏–∞–ª–æ–≥–∏
        case 'dialog':
          await this.handleDialogAction(ctx, callbackData);
          break;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        case 'settings':
          await this.handleSettingsAction(ctx, callbackData);
          break;

        default:
          await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
          this.logWarning('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ callback –¥–µ–π—Å—Ç–≤–∏–µ', { action: callbackData.action });
      }

      await ctx.answerCbQuery();
    } catch (error) {
      this.logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query', {
        error: getErrorMessage(error),
        callbackData: (ctx.callbackQuery as { data?: string })?.data,
        userId: ctx.from?.id,
      });

      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ callback –¥–∞–Ω–Ω—ã—Ö
   */
  private parseCallbackData(data: string): ParsedCallback {
    try {
      const parts = data.split('_');

      return {
        action: parts[0],
        subAction: parts[1],
        entityId: parts[2],
        params: parts.slice(3).reduce(
          (acc, part, index) => {
            acc[`param${index}`] = part;
            return acc;
          },
          {} as Record<string, any>,
        ),
      };
    } catch (error) {
      this.logWarning('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö', {
        data,
        error: getErrorMessage(error),
      });
      return { action: 'unknown' };
    }
  }

  // === –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===

  private async handleMainMenu(ctx: Context): Promise<void> {
    const message = `
ü§ñ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `.trim();

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üë• –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏', callback_data: 'my_characters' },
          { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', callback_data: 'create_character' },
        ],
        [
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings_show' },
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
        ],
      ],
    };

    if (ctx.callbackQuery && 'message' in ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      });
    }
  }

  private async handleMyCharacters(ctx: Context): Promise<void> {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const message = `
üë• *–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏*

–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...
    `.trim();

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ', callback_data: 'create_character' }],
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  private async handleCreateCharacter(ctx: Context): Promise<void> {
    const message = `
üé≠ *–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞*

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –∏–ª–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –º–µ–Ω—é.
    `.trim();

    const keyboard = {
      inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  private async handleHelp(ctx: Context): Promise<void> {
    const message = `
‚ùì *–°–ø—Ä–∞–≤–∫–∞*

üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
    `.trim();

    const keyboard = {
      inline_keyboard: [[{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  // === –î–ï–ô–°–¢–í–ò–Ø –° –ü–ï–†–°–û–ù–ê–ñ–ê–ú–ò ===

  private async handleCharacterAction(ctx: Context, data: ParsedCallback): Promise<void> {
    const { subAction, entityId } = data;

    if (!entityId) {
      await ctx.answerCbQuery('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
      return;
    }

    switch (subAction) {
      case 'select':
        await this.selectCharacter(ctx, entityId);
        break;
      case 'chat':
        await this.startCharacterChat(ctx, entityId);
        break;
      case 'settings':
        await this.showCharacterSettings(ctx, entityId);
        break;
      case 'delete':
        await this.deleteCharacter(ctx, entityId);
        break;
      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º');
    }
  }

  private async selectCharacter(ctx: Context, characterId: string): Promise<void> {
    const message = `‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç', callback_data: `char_chat_${characterId}` },
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: `char_settings_${characterId}` },
        ],
        [
          { text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `char_delete_${characterId}` },
          { text: 'üîô –ö —Å–ø–∏—Å–∫—É', callback_data: 'my_characters' },
        ],
      ],
    };

    await ctx.editMessageText(message, { reply_markup: keyboard });
  }

  private async startCharacterChat(ctx: Context, characterId: string): Promise<void> {
    const message = `üí¨ –ß–∞—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –Ω–∞—á–∞—Ç\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.`;

    const keyboard = {
      inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `char_select_${characterId}` }]],
    };

    await ctx.editMessageText(message, { reply_markup: keyboard });
  }

  private async showCharacterSettings(ctx: Context, characterId: string): Promise<void> {
    const message = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞*

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
    `.trim();

    const keyboard = {
      inline_keyboard: [
        [{ text: 'ü§ñ –ê–≤—Ç–æ–¥–µ–π—Å—Ç–≤–∏—è', callback_data: `settings_char_auto_${characterId}` }],
        [{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: `settings_char_notify_${characterId}` }],
        [{ text: 'üìä –õ–∏–º–∏—Ç—ã', callback_data: `settings_char_limits_${characterId}` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `char_select_${characterId}` }],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  private async deleteCharacter(ctx: Context, characterId: string): Promise<void> {
    const message = `
‚ö†Ô∏è *–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞*

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?

‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
    `.trim();

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `char_confirm_delete_${characterId}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `char_select_${characterId}` },
        ],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  // === –î–ò–ê–õ–û–ì–ò ===

  private async handleDialogAction(ctx: Context, data: ParsedCallback): Promise<void> {
    const { subAction } = data;

    switch (subAction) {
      case 'start':
        await this.startDialog(ctx);
        break;
      case 'end':
        await this.endDialog(ctx);
        break;
      case 'history':
        await this.showDialogHistory(ctx);
        break;
      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∏–∞–ª–æ–≥–æ–º');
    }
  }

  private async startDialog(ctx: Context): Promise<void> {
    const message = `üí¨ –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç`;
    const keyboard = {
      inline_keyboard: [[{ text: 'üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'dialog_end' }]],
    };
    await ctx.editMessageText(message, { reply_markup: keyboard });
  }

  private async endDialog(ctx: Context): Promise<void> {
    const message = `‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω`;
    const keyboard = {
      inline_keyboard: [[{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]],
    };
    await ctx.editMessageText(message, { reply_markup: keyboard });
  }

  private async showDialogHistory(ctx: Context): Promise<void> {
    const message = `üìö –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤`;
    const keyboard = {
      inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]],
    };
    await ctx.editMessageText(message, { reply_markup: keyboard });
  }

  // === –ù–ê–°–¢–†–û–ô–ö–ò ===

  private async handleSettingsAction(ctx: Context, data: ParsedCallback): Promise<void> {
    const { subAction } = data;

    switch (subAction) {
      case 'show':
        await this.showSettings(ctx);
        break;
      case 'language':
        await this.showLanguageSettings(ctx);
        break;
      case 'notifications':
        await this.showNotificationSettings(ctx);
        break;
      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
    }
  }

  private async showSettings(ctx: Context): Promise<void> {
    const message = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
    `.trim();

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üåê –Ø–∑—ã–∫', callback_data: 'settings_language' },
          { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications' },
        ],
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  private async showLanguageSettings(ctx: Context): Promise<void> {
    const message = `
üåê *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞*

–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
    `.trim();

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'settings_set_lang_ru' },
          { text: 'üá∫üá∏ English', callback_data: 'settings_set_lang_en' },
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'settings_show' }],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  private async showNotificationSettings(ctx: Context): Promise<void> {
    const message = `
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:
    `.trim();

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ', callback_data: 'settings_notify_all_on' },
          { text: '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ', callback_data: 'settings_notify_all_off' },
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'settings_show' }],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }
}
