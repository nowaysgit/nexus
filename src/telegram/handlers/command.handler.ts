import { Injectable, Logger } from '@nestjs/common';
import { Markup } from 'telegraf';
import { Context } from '../interfaces/context.interface';
import { SessionService } from '../services/session.service';
import { AccessService } from '../services/access.service';
import { MessageService } from '../services/message.service';
import { PsychologicalTestService } from '../services/psychological-test.service';
import { CharacterService } from '../services/character.service';
import { ConfigService } from '@nestjs/config';
import { CharacterActionService } from '../services/character-action.service';
import { CharacterBehaviorService } from '../../character/services/character-behavior.service';

@Injectable()
export class CommandHandler {
  private readonly adminUsers: string[];
  private readonly logger = new Logger(CommandHandler.name);

  constructor(
    private configService: ConfigService,
    private sessionService: SessionService,
    private accessService: AccessService,
    private messageService: MessageService,
    private psychologicalTestService: PsychologicalTestService,
    private characterService: CharacterService,
    private characterActionService: CharacterActionService,
    private characterBehaviorService: CharacterBehaviorService,
  ) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const adminIds = this.configService.get<string>('ADMIN_TELEGRAM_IDS', '');
    this.adminUsers = adminIds.split(',').map(id => id.trim());
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  async handleStart(ctx: Context): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
      const hasAccess = await this.accessService.checkAccess(ctx);
      if (!hasAccess) {
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.sessionService.setInitialState(ctx);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.messageService.sendMainMenu(ctx);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  async handleHelp(ctx: Context): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
      const hasAccess = await this.accessService.checkAccess(ctx);
      if (!hasAccess) {
        return;
      }

      await this.messageService.sendHelpMessage(ctx);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /characters
  async handleCharacters(ctx: Context): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
      const hasAccess = await this.accessService.checkAccess(ctx);
      if (!hasAccess) {
        return;
      }

      await this.characterService.showUserCharacters(ctx);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /characters: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /create
  async handleCreate(ctx: Context): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
      const hasAccess = await this.accessService.checkAccess(ctx);
      if (!hasAccess) {
        return;
      }

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
      await ctx.reply(
        '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–¥–æ–π–¥–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç. –û–Ω –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞—Ä—Ö–µ—Ç–∏–ø.',
        Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úÖ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', 'start_test'),
            Markup.button.callback('‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'show_archetypes'),
          ],
        ]),
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /create: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async handleAdminCommand(ctx: Context, command: string): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      const telegramId = ctx.from.id.toString();
      if (!this.adminUsers.includes(telegramId)) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
      const parts = command.split(' ');
      const action = parts[0];

      switch (action) {
        case '/generate_key':
          // –ü—Ä–∏–º–µ—Ä: /generate_key 3 7 (–ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: 3, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 7 –¥–Ω–µ–π)
          const usageLimit = parts[1] ? parseInt(parts[1]) : null;
          const expiryDays = parts[2] ? parseInt(parts[2]) : null;

          const key = await this.accessService.generateAccessKey(usageLimit, expiryDays);

          await ctx.reply(
            `‚úÖ –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å–æ–∑–¥–∞–Ω:\n\n–ö–ª—é—á: ${key.value}\n–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${
              key.usageLimit !== null ? key.usageLimit : '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω'
            }\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${
              key.expiryDate ? key.expiryDate.toLocaleDateString() : '–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω'
            }`,
          );
          break;

        case '/list_keys':
          const keys = await this.accessService.getAllKeys();

          if (keys.length === 0) {
            await ctx.reply('–ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            return;
          }

          const keysList = keys
            .map(
              k =>
                `üîë ${k.value} | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${k.usageCount}/${
                  k.usageLimit !== null ? k.usageLimit : '‚àû'
                } | –ê–∫—Ç–∏–≤–µ–Ω: ${k.isActive ? '‚úÖ' : '‚ùå'} | –°—Ä–æ–∫: ${
                  k.expiryDate ? k.expiryDate.toLocaleDateString() : '‚àû'
                }`,
            )
            .join('\n\n');

          await ctx.reply(`–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞:\n\n${keysList}`);
          break;

        case '/deactivate_key':
          const keyToDeactivate = parts[1];

          if (!keyToDeactivate) {
            await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.');
            return;
          }

          const deactivated = await this.accessService.deactivateAccessKey(keyToDeactivate);

          if (deactivated) {
            await ctx.reply(`‚úÖ –ö–ª—é—á ${keyToDeactivate} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.`);
          } else {
            await ctx.reply(`‚ùå –ö–ª—é—á ${keyToDeactivate} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
          }
          break;

        default:
          await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
  async handleCallback(ctx: Context, callbackData: string): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
      if (!callbackData.startsWith('test_answer_')) {
        const hasAccess = await this.accessService.checkAccess(ctx);
        if (!hasAccess) {
          return;
        }
      }

      // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–ª–±—ç–∫–∞
      await ctx.answerCbQuery();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–ª–ª–±—ç–∫–æ–≤
      if (callbackData === 'start_test') {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
        await this.psychologicalTestService.startTest(ctx);
      } else if (callbackData.startsWith('test_answer_')) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
        const value = callbackData.replace('test_answer_', '');
        await this.psychologicalTestService.handleAnswer(ctx, value);
      } else if (callbackData === 'show_archetypes') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        await this.messageService.sendArchetypeSelection(ctx);
      } else if (callbackData.startsWith('archetype_')) {
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞
        const archetype = callbackData.replace('archetype_', '');
        await this.createCharacterWithArchetype(ctx, archetype);
      } else if (callbackData.startsWith('info_')) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        const characterId = parseInt(callbackData.replace('info_', ''));
        await this.characterService.showCharacterInfo(ctx, characterId);
      } else if (callbackData.startsWith('chat_with_')) {
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
        const characterId = parseInt(callbackData.replace('chat_with_', ''));
        await this.startChatWithCharacter(ctx, characterId);
      } else if (callbackData === 'show_characters') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        await this.characterService.showUserCharacters(ctx);
      } else if (callbackData === 'create_character') {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        await this.handleCreate(ctx);
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–ª–±—ç–∫–∞: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞—Ä—Ö–µ—Ç–∏–ø–æ–º
  private async createCharacterWithArchetype(ctx: Context, archetype: string): Promise<void> {
    try {
      await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');

      const userId = ctx.from.id.toString();
      const character = await this.characterService.createCharacter(userId, archetype);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
      await this.messageService.sendNewCharacterInfo(ctx, character);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ó–∞–ø—É—Å–∫ –æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
  private async startChatWithCharacter(ctx: Context, characterId: number): Promise<void> {
    try {
      const character = await this.characterService.getCharacterById(characterId);

      if (!character) {
        await ctx.reply('–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      ctx.session.state = 'chatting';
      ctx.session.data = {
        ...ctx.session.data,
        activeCharacterId: characterId,
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      await ctx.reply(
        `üí¨ –ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å ${character.name}.\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop.`,
        Markup.keyboard([
          ['üëã –ü—Ä–∏–≤–µ—Ç', '‚ùì –ö–∞–∫ –¥–µ–ª–∞?'],
          ['üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ'],
        ])
          .oneTime()
          .resize(),
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const greeting = await this.generateCharacterMessage(character, 'greeting');
      await ctx.reply(greeting);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—â–µ–Ω–∏—è: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞)
  private async generateCharacterMessage(character: any, messageType: string): Promise<string> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ OpenAI API
    // –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const greetings = [
      `–ü—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è. –Ø ${character.name}.`,
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ú–µ–Ω—è –∑–æ–≤—É—Ç ${character.name}. –ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?`,
      `${character.name} –∑–¥–µ—Å—å. –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ.`,
      `–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥—É–º–∞–ª–∞ –æ —Ç–µ–±–µ. –ö–∞–∫ –¥–µ–ª–∞?`,
    ];

    const randomIndex = Math.floor(Math.random() * greetings.length);
    return greetings[randomIndex];
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /actions - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  async handleActionsCommand(ctx: Context): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const hasAccess = await this.accessService.checkAccess(ctx);
      if (!hasAccess) return;

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
      const characterId = ctx.session?.data?.activeCharacterId;
      if (!characterId) {
        await ctx.reply(
          '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è–º–∏, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /characters',
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
      const character = await this.characterService.getCharacterById(characterId);
      if (!character) {
        await ctx.reply('–û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–µ–π—Å—Ç–≤–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const isPerformingAction = this.characterActionService.isPerformingAction(characterId);
      const currentAction = this.characterActionService.getCurrentAction(characterId);

      let actionText = '';
      let keyboard;

      if (isPerformingAction && currentAction) {
        // –ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
        const startTime = new Date(currentAction.startTime).toLocaleTimeString();
        const endTimeText = currentAction.endTime
          ? `–¥–æ ${new Date(currentAction.endTime).toLocaleTimeString()}`
          : '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏';

        actionText = `
*${character.name} —Å–µ–π—á–∞—Å:* ${currentAction.description}
*–ù–∞—á–∞–ª–æ:* ${startTime}
*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${endTimeText}
*–°—Ç–∞—Ç—É—Å:* ${currentAction.status === 'in_progress' ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' : currentAction.status}

${currentAction.content || ''}`;

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–µ–º
        keyboard = Markup.inlineKeyboard([
          Markup.button.callback('üõë –ü—Ä–µ—Ä–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', `stop_action:${characterId}`),
        ]);
      } else {
        // –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
        actionText = `*${character.name}* –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏—á–µ–º –Ω–µ –∑–∞–Ω—è—Ç.
          
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É –¥–µ–π—Å—Ç–≤–∏–µ:`;

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('üò¥ –°–ø–∞—Ç—å', `suggest_action:${characterId}:sleep`),
            Markup.button.callback('üìö –ß–∏—Ç–∞—Ç—å', `suggest_action:${characterId}:read`),
          ],
          [
            Markup.button.callback(
              'üèãÔ∏è –ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º',
              `suggest_action:${characterId}:exercise`,
            ),
            Markup.button.callback('üßò –ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å', `suggest_action:${characterId}:meditate`),
          ],
          [
            Markup.button.callback('üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', `suggest_action:${characterId}:create`),
            Markup.button.callback('üë• –û–±—â–µ–Ω–∏–µ', `suggest_action:${characterId}:socialize`),
          ],
        ]);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–π—Å—Ç–≤–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      await ctx.reply(actionText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /actions: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  async handleActionCallbacks(ctx: Context): Promise<void> {
    try {
      const callbackData = ctx.callbackQuery.data;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–µ–π—Å—Ç–≤–∏—è
      if (callbackData.startsWith('stop_action:')) {
        const characterId = parseInt(callbackData.split(':')[1]);
        await this.characterActionService.completeAction(characterId);
        await ctx.editMessageText('–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      if (callbackData.startsWith('suggest_action:')) {
        const parts = callbackData.split(':');
        const characterId = parseInt(parts[1]);
        const actionType = parts[2];

        // –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ CharacterBehaviorService
        const behaviorContext =
          await this.characterBehaviorService.getBehaviorContextForResponse(characterId);
        const motivations = behaviorContext.motivations;

        // –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        const suggestedMotivation = {
          needType: 'USER_SUGGESTION',
          priority: 1,
          threshold: 0,
          actionImpulse: `–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ${actionType}, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`,
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        const updatedMotivations = [suggestedMotivation, ...motivations];

        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        const action = await this.characterActionService.determineAndPerformAction(
          characterId,
          updatedMotivations,
          actionType,
        );

        if (action) {
          await ctx.editMessageText(`${action.description} - –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞—á–∞—Ç–æ!`);
        } else {
          await ctx.editMessageText('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        return;
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
      await ctx.answerCbQuery();
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è');
    }
  }
}
