import { Injectable } from '@nestjs/common';
import { LogService } from '../../logging/log.service';
import { ConfigService } from '@nestjs/config';
import { CharacterMetadata, TelegramKeyboardMarkup } from '../interfaces/telegram.interfaces';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram
 * –ò–∑–≤–ª–µ—á–µ–Ω –∏–∑ MessageFormatterService –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 */
@Injectable()
export class KeyboardFormatterService {
  constructor(
    private readonly configService: ConfigService,
    private readonly logService: LogService,
  ) {
    this.logService.setContext(KeyboardFormatterService.name);
    this.logService.log('KeyboardFormatterService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   */
  createMainMenuKeyboard(): TelegramKeyboardMarkup {
    return {
      inline_keyboard: [
        [{ text: 'üë§ –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏', callback_data: 'characters_list' }],
        [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', callback_data: 'character_create' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }],
      ],
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  async createCharacterProfileKeyboard(
    character: CharacterMetadata,
  ): Promise<TelegramKeyboardMarkup> {
    const buttons = [
      [
        { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å', callback_data: `character_chat_${character.id}` },
        { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: `character_status_${character.id}` },
      ],
      [
        { text: '‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è', callback_data: `character_actions_${character.id}` },
        { text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `character_edit_${character.id}` },
      ],
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    if (character.isArchived) {
      buttons.push([
        { text: 'üì§ –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `character_unarchive_${character.id}` },
      ]);
    } else {
      buttons.push([
        { text: 'üì• –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `character_archive_${character.id}` },
      ]);
    }

    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'characters_list' }]);

    return { inline_keyboard: buttons };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
   */
  createConfirmationKeyboard(action: string, entityId: string | number): TelegramKeyboardMarkup {
    return {
      inline_keyboard: [
        [
          { text: '‚úÖ –î–∞', callback_data: `confirm_${action}_${entityId}` },
          { text: '‚ùå –ù–µ—Ç', callback_data: `cancel_${action}_${entityId}` },
        ],
      ],
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  createCharacterActionsKeyboard(characterId: string): TelegramKeyboardMarkup {
    return {
      inline_keyboard: [
        [
          { text: 'üéØ –ù–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', callback_data: `action_start_${characterId}` },
          { text: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `action_pause_${characterId}` },
        ],
        [
          { text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `action_stop_${characterId}` },
          { text: 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', callback_data: `action_progress_${characterId}` },
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É', callback_data: `character_profile_${characterId}` }],
      ],
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  createActionKeyboard(characterId: string, actions: string[]): TelegramKeyboardMarkup {
    const buttons = actions.map((action, index) => [
      { text: `${index + 1}. ${action}`, callback_data: `action_${characterId}_${index}` },
    ]);
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `character_status_${characterId}` }]);

    return { inline_keyboard: buttons };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   */
  createCharacterListKeyboard(characters: CharacterMetadata[]): TelegramKeyboardMarkup {
    const buttons = characters.map(character => [
      { text: character.name, callback_data: `character_view_${character.id}` },
    ]);
    buttons.push([
      { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ', callback_data: 'character_create' },
      { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
    ]);

    return { inline_keyboard: buttons };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∞
   */
  createArchetypeKeyboard(archetypes: string[]): TelegramKeyboardMarkup {
    const buttons: Array<Array<{ text: string; callback_data: string }>> = [];
    for (let i = 0; i < archetypes.length; i += 2) {
      const row: Array<{ text: string; callback_data: string }> = [];
      row.push({ text: archetypes[i], callback_data: `archetype_${archetypes[i].toLowerCase()}` });
      if (i + 1 < archetypes.length) {
        row.push({
          text: archetypes[i + 1],
          callback_data: `archetype_${archetypes[i + 1].toLowerCase()}`,
        });
      }
      buttons.push(row);
    }
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

    return { inline_keyboard: buttons };
  }
}
