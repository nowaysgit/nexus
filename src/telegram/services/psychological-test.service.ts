import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Markup } from 'telegraf';
import { Context } from '../interfaces/context.interface';
import { PsychologicalTest } from '../../psychological-test/entities/psychological-test.entity';
import { SessionService } from './session.service';

@Injectable()
export class PsychologicalTestService {
  private readonly logger = new Logger(PsychologicalTestService.name);

  // –í–æ–ø—Ä–æ—Å—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
  private readonly questions = [
    {
      text: '–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?',
      options: [
        { text: '–í –∫–æ–º–ø–∞–Ω–∏–∏ –¥—Ä—É–∑–µ–π', value: 'extrovert' },
        { text: '–° –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º', value: 'romantic' },
        { text: '–ó–∞ —á—Ç–µ–Ω–∏–µ–º –∫–Ω–∏–≥–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Ñ–∏–ª—å–º–∞', value: 'introvert' },
        { text: '–ó–∞–Ω–∏–º–∞—è—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º —Ö–æ–±–±–∏', value: 'adventurous' },
      ],
    },
    {
      text: '–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –ª—é–¥—è—Ö?',
      options: [
        { text: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ —ç—Ä—É–¥–∏—Ü–∏—è', value: 'intellectual' },
        { text: '–ó–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç—å –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å', value: 'mysterious' },
        { text: '–î–æ–±—Ä–æ—Ç–∞ –∏ –∑–∞–±–æ—Ç–∞', value: 'nurturing' },
        { text: '–°—Ç—Ä–∞—Å—Ç—å –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', value: 'femme_fatale' },
      ],
    },
    {
      text: '–ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä?',
      options: [
        { text: '–°–ø–æ–∫–æ–π–Ω—ã–π –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π', value: 'gentle' },
        { text: '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π', value: 'rebel' },
        { text: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∏ –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π', value: 'romantic' },
        { text: '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π', value: 'adventurous' },
      ],
    },
    {
      text: '–ö–∞–∫–æ–π –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–æ–≤/–∫–Ω–∏–≥ –≤–∞–º –±–ª–∏–∂–µ?',
      options: [
        { text: '–î—Ä–∞–º–∞/–ú–µ–ª–æ–¥—Ä–∞–º–∞', value: 'romantic' },
        { text: '–î–µ—Ç–µ–∫—Ç–∏–≤/–¢—Ä–∏–ª–ª–µ—Ä', value: 'mysterious' },
        { text: '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞/–î–æ–∫—É–º–µ–Ω—Ç–∞–ª–∏—Å—Ç–∏–∫–∞', value: 'intellectual' },
        { text: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è/–ë–æ–µ–≤–∏–∫', value: 'adventurous' },
      ],
    },
    {
      text: '–ß—Ç–æ –≤—ã —Ü–µ–Ω–∏—Ç–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
      options: [
        { text: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å', value: 'nurturing' },
        { text: '–°—Ç—Ä–∞—Å—Ç—å –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å', value: 'femme_fatale' },
        { text: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', value: 'intellectual' },
        { text: '–°–≤–æ–±–æ–¥—É –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', value: 'rebel' },
      ],
    },
  ];

  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
  private readonly archetypeMap = {
    gentle: 'gentle',
    femme_fatale: 'femme_fatale',
    intellectual: 'intellectual',
    adventurous: 'adventurous',
    mysterious: 'mysterious',
    nurturing: 'nurturing',
    rebel: 'rebel',
    romantic: 'romantic',
    extrovert: 'adventurous',
    introvert: 'intellectual',
  };

  constructor(
    @InjectRepository(PsychologicalTest)
    private psychologicalTestRepository: Repository<PsychologicalTest>,
    private sessionService: SessionService,
  ) {}

  // –ó–∞–ø—É—Å–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
  async startTest(ctx: Context): Promise<void> {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.data = {
        ...ctx.session.data,
        test: {
          currentQuestion: 0,
          answers: [],
        },
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
      await this.sendQuestion(ctx, 0);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞
  async sendQuestion(ctx: Context, questionIndex: number): Promise<void> {
    const question = this.questions[questionIndex];

    const buttons = question.options.map(option => [
      Markup.button.callback(option.text, `test_answer_${option.value}`),
    ]);

    await ctx.reply(
      `–í–æ–ø—Ä–æ—Å ${questionIndex + 1}/${this.questions.length}: ${question.text}`,
      Markup.inlineKeyboard(buttons),
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
  async handleAnswer(ctx: Context, value: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
      const currentQuestion = ctx.session.data.test.currentQuestion;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      ctx.session.data.test.answers.push(value);

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
      if (currentQuestion >= this.questions.length - 1) {
        await this.finishTest(ctx);
        return;
      }

      // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
      ctx.session.data.test.currentQuestion++;
      await this.sendQuestion(ctx, ctx.session.data.test.currentQuestion);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç.');
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  async finishTest(ctx: Context): Promise<void> {
    try {
      const answers = ctx.session.data.test.answers;

      // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
      const counts = {};
      answers.forEach(answer => {
        counts[answer] = (counts[answer] || 0) + 1;
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Ç–∏–ø
      let maxCount = 0;
      let dominantType = '';

      Object.keys(counts).forEach(key => {
        if (counts[key] > maxCount) {
          maxCount = counts[key];
          dominantType = key;
        }
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–µ—Ç–∏–ø –ø–æ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–º—É —Ç–∏–ø—É
      const archetype = this.archetypeMap[dominantType] || 'gentle';

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –≤ –ë–î
      const telegramId = ctx.from.id.toString();
      const testResult = new PsychologicalTest();
      testResult.userId = telegramId;
      testResult.answers = answers;
      testResult.dominantType = dominantType;
      testResult.recommendedArchetype = archetype;

      await this.psychologicalTestRepository.save(testResult);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∞—Ä—Ö–µ—Ç–∏–ø –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.data = {
        ...ctx.session.data,
        recommendedArchetype: archetype,
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
      await ctx.reply(
        `‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∞: ${this.getArchetypeName(archetype)}\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø, –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é.`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              `‚úÖ –í—ã–±—Ä–∞—Ç—å ${this.getArchetypeName(archetype)}`,
              `archetype_${archetype}`,
            ),
          ],
          [Markup.button.callback('üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∞—Ä—Ö–µ—Ç–∏–ø', 'show_archetypes')],
        ]),
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ä—Ö–µ—Ç–∏–ø–∞
  private getArchetypeName(archetype: string): string {
    const archetypeNames = {
      gentle: '–ù–µ–∂–Ω–∞—è',
      femme_fatale: '–†–æ–∫–æ–≤–∞—è',
      intellectual: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª–∫–∞',
      adventurous: '–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–∫–∞',
      mysterious: '–ó–∞–≥–∞–¥–æ—á–Ω–∞—è',
      nurturing: '–ó–∞–±–æ—Ç–ª–∏–≤–∞—è',
      rebel: '–ë—É–Ω—Ç–∞—Ä–∫–∞',
      romantic: '–†–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è',
    };

    return archetypeNames[archetype] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ö–µ—Ç–∏–ø';
  }
}
