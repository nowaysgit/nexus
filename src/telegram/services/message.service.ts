import { Injectable, Logger } from '@nestjs/common';
import { Markup } from 'telegraf';
import { Context } from '../interfaces/context.interface';
import { Character } from '../../character/entities/character.entity';
import { TelegramBotProvider } from '../providers/telegram-bot.provider';
import { DialogService } from '../../dialog/services/dialog.service';
import { CharacterService } from './character.service';

@Injectable()
export class MessageService {
  private readonly logger = new Logger(MessageService.name);
  private readonly bot;

  constructor(
    private telegramBotProvider: TelegramBotProvider,
    private dialogService: DialogService,
    private characterService: CharacterService,
  ) {
    this.bot = this.telegramBotProvider.getBot();
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  // –≠—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @param message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (characterId, isProactive, etc.)
   */
  async sendMessageToUser(
    telegramId: string | number,
    message: string,
    options: {
      characterId: number;
      isProactive?: boolean;
      actionType?: string;
      metadata?: Record<string, any>;
    },
  ): Promise<void> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.bot.telegram.sendMessage(telegramId, message);

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω characterId, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥
      if (options.characterId) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ
        const character = await this.characterService.getCharacterById(options.characterId);
        if (character) {
          // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
          const dialog = await this.dialogService.getOrCreateDialog(
            telegramId.toString(),
            options.characterId,
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          await this.dialogService.saveCharacterMessageDirect(dialog.id, message, {
            isProactive: options.isProactive || false,
            actionType: options.actionType,
            metadata: options.metadata,
          });
        }
      }
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}: ${error.message}`,
      );
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  async sendMainMenu(ctx: Context): Promise<void> {
    try {
      const keyboard = Markup.keyboard([
        ['üë• –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏', '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'],
        ['‚ùì –ü–æ–º–æ—â—å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
      ])
        .resize()
        .oneTime(false);

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: ${error.message}`);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
  async sendCharacterInfo(ctx: Context, character: Character): Promise<void> {
    const personalityInfo =
      `üåü –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: ${character.personality.traits.join(', ')}\n` +
      `üé≠ –•–æ–±–±–∏: ${character.personality.hobbies.join(', ')}\n` +
      `üò® –°—Ç—Ä–∞—Ö–∏: ${character.personality.fears.join(', ')}\n` +
      `üíñ –¶–µ–Ω–Ω–æ—Å—Ç–∏: ${character.personality.values.join(', ')}\n` +
      `üéµ –ú—É–∑. –≤–∫—É—Å—ã: ${character.personality.musicTaste.join(', ')}`;

    await ctx.reply(
      `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ\n\n` +
        `üë§ ${character.name}, ${character.age} –ª–µ—Ç\n` +
        `üîÆ –ê—Ä—Ö–µ—Ç–∏–ø: ${character.archetype}\n\n` +
        `üìù –ë–∏–æ–≥—Ä–∞—Ñ–∏—è:\n${character.biography}\n\n` +
        `üëó –í–Ω–µ—à–Ω–æ—Å—Ç—å:\n${character.appearance}\n\n` +
        `${personalityInfo}\n\n` +
        `üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n` +
        `üíì –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å: ${character.affection}/100\n` +
        `ü§ù –î–æ–≤–µ—Ä–∏–µ: ${character.trust}/100\n` +
        `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${character.energy}/100\n` +
        `üîÑ –≠—Ç–∞–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: ${character.relationshipStage}`,
      Markup.inlineKeyboard([
        Markup.button.callback('üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ', `chat_with_${character.id}`),
        Markup.button.callback('üîô –ö —Å–ø–∏—Å–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π', 'show_characters'),
      ]),
    );
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  async sendCharacterStatus(ctx: Context, character: any): Promise<void> {
    try {
      let statusText = `
*${character.name}*
–ê—Ä—Ö–µ—Ç–∏–ø: ${character.archetype}
–õ–∏—á–Ω–æ—Å—Ç—å: ${character.personality}

*–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:*
`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö
      if (character.needs && character.needs.length > 0) {
        character.needs.forEach(need => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
          let indicator = '';
          if (need.value >= 80)
            indicator = 'üî¥'; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
          else if (need.value >= 60)
            indicator = 'üü†'; // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
          else if (need.value >= 40)
            indicator = 'üü°'; // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
          else if (need.value >= 20)
            indicator = 'üü¢'; // –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
          else indicator = 'üîµ'; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å

          statusText += `${indicator} ${need.type}: ${need.value}%\n`;
        });
      } else {
        statusText += '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n';
      }

      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
      const keyboard = Markup.keyboard([['üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'], ['üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ']])
        .resize()
        .oneTime(false);

      await ctx.reply(statusText, {
        parse_mode: 'Markdown',
        ...keyboard,
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${error.message}`);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
  async sendNewCharacterInfo(ctx: Context, character: Character): Promise<void> {
    const personalityInfo =
      `üåü –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: ${character.personality.traits.join(', ')}\n` +
      `üé≠ –•–æ–±–±–∏: ${character.personality.hobbies.join(', ')}\n` +
      `üò® –°—Ç—Ä–∞—Ö–∏: ${character.personality.fears.join(', ')}\n` +
      `üíñ –¶–µ–Ω–Ω–æ—Å—Ç–∏: ${character.personality.values.join(', ')}\n` +
      `üéµ –ú—É–∑. –≤–∫—É—Å—ã: ${character.personality.musicTaste.join(', ')}`;

    await ctx.reply(
      `‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
        `üë§ ${character.name}, ${character.age} –ª–µ—Ç\n\n` +
        `üìù –ë–∏–æ–≥—Ä–∞—Ñ–∏—è:\n${character.biography.slice(0, 300)}...\n\n` +
        `üëó –í–Ω–µ—à–Ω–æ—Å—Ç—å:\n${character.appearance.slice(0, 200)}...\n\n` +
        `${personalityInfo}`,
      Markup.inlineKeyboard([
        Markup.button.callback('üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ', `chat_with_${character.id}`),
        Markup.button.callback('üîô –ö —Å–ø–∏—Å–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π', 'show_characters'),
      ]),
    );
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  async sendCharacterList(ctx: Context, characters: Character[]): Promise<void> {
    if (characters.length === 0) {
      await ctx.reply(
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!',
        Markup.inlineKeyboard([Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', 'create_character')]),
      );
      return;
    }

    const message =
      '–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:\n\n' +
      characters
        .map((character, index) => {
          return `${index + 1}. ${character.name} (${character.age}), ${character.archetype}\n`;
        })
        .join('\n');

    const buttons = characters.map(character => [
      Markup.button.callback(`üí¨ ${character.name}`, `chat_with_${character.id}`),
      Markup.button.callback(`‚ÑπÔ∏è –ò–Ω—Ñ–æ`, `info_${character.id}`),
    ]);

    await ctx.reply(message, Markup.inlineKeyboard(buttons));
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∞
  async sendArchetypeSelection(ctx: Context): Promise<void> {
    const archetypeButtons = [
      [
        Markup.button.callback('–ù–µ–∂–Ω–∞—è', 'archetype_gentle'),
        Markup.button.callback('–†–æ–∫–æ–≤–∞—è', 'archetype_femme_fatale'),
      ],
      [
        Markup.button.callback('–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª–∫–∞', 'archetype_intellectual'),
        Markup.button.callback('–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–∫–∞', 'archetype_adventurous'),
      ],
      [
        Markup.button.callback('–ó–∞–≥–∞–¥–æ—á–Ω–∞—è', 'archetype_mysterious'),
        Markup.button.callback('–ó–∞–±–æ—Ç–ª–∏–≤–∞—è', 'archetype_nurturing'),
      ],
      [
        Markup.button.callback('–ë—É–Ω—Ç–∞—Ä–∫–∞', 'archetype_rebel'),
        Markup.button.callback('–†–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è', 'archetype_romantic'),
      ],
    ];

    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ö–µ—Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ò–ò –¥–æ–ø–æ–ª–Ω–∏—Ç –µ–≥–æ –±–∏–æ–≥—Ä–∞—Ñ–∏—é, –≤–Ω–µ—à–Ω–æ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
      Markup.inlineKeyboard(archetypeButtons),
    );
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
  async sendHelpMessage(ctx: Context): Promise<void> {
    try {
      const helpText = `
*AI Character Chat Bot* - –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/characters - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ /characters
3. –û–±—â–∞–π—Ç–µ—Å—å —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
4. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:*
- –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–º–Ω—è—Ç –≤–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
- –£ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –∏—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–æ–≥—É—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –∏ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
- –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏, –∫–æ–≥–¥–∞ –≤—ã —Å –Ω–∏–º–∏ –Ω–µ –æ–±—â–∞–µ—Ç–µ—Å—å

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @yourdeveloper
      `;

      await ctx.reply(helpText, { parse_mode: 'Markdown' });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏: ${error.message}`);
    }
  }
}
