import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Character } from '../../character/entities/character.entity';
import { BaseService } from '../../common/base/base.service';
import { Retry } from '../../common/decorators/retry.decorator';
import { CharacterMetadata } from '../interfaces/telegram.interfaces';
import { LogService } from '../../logging/log.service';

/**
 * –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
 */
export enum TelegramMessageType {
  INFO = 'info',
  SUCCESS = 'success',
  WARNING = 'warning',
  ERROR = 'error',
  CHARACTER_MESSAGE = 'character_message',
  SYSTEM = 'system',
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export interface MessageTemplate {
  title?: string;
  content: string;
  footer?: string;
  parseMode?: 'Markdown' | 'HTML';
  emoji?: boolean;
}

/**
 * –°–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π KeyboardFormatterService
 */
@Injectable()
export class MessageFormatterService extends BaseService {
  private readonly maxMessageLength = 4096;

  constructor(
    private readonly configService: ConfigService,
    logService: LogService,
  ) {
    super(logService);
    this.logInfo('–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π MessageFormatterService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  private readonly typeEmojis = {
    [TelegramMessageType.INFO]: '‚ÑπÔ∏è',
    [TelegramMessageType.SUCCESS]: '‚úÖ',
    [TelegramMessageType.WARNING]: '‚ö†Ô∏è',
    [TelegramMessageType.ERROR]: '‚ùå',
    [TelegramMessageType.CHARACTER_MESSAGE]: 'üí¨',
    [TelegramMessageType.SYSTEM]: 'üîß',
  };

  // === –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ===

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É –∏ —à–∞–±–ª–æ–Ω—É
   * @param type –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param template –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  format(type: TelegramMessageType, template: MessageTemplate): string {
    try {
      const { title, content, footer, emoji = true } = template;
      const prefix = emoji ? `${this.typeEmojis[type]} ` : '';

      let message = '';

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (title) {
        message +=
          template.parseMode === 'Markdown'
            ? `*${prefix}${title}*\n\n`
            : `<b>${prefix}${title}</b>\n\n`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      message += content;

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–≤–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (footer) {
        message += template.parseMode === 'Markdown' ? `\n\n_${footer}_` : `\n\n<i>${footer}</i>`;
      }

      return message;
    } catch (error) {
      this.logError('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è', {
        error: error instanceof Error ? error.message : String(error),
      });
      return template.content; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
   * @param title –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param footer –ü–æ–¥–≤–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  formatInfo(content: string, title?: string, footer?: string): string {
    return this.format(TelegramMessageType.INFO, {
      title,
      content,
      footer,
      parseMode: 'Markdown',
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
   * @param content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
   * @param title –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param footer –ü–æ–¥–≤–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   */
  formatSuccess(content: string, title?: string, footer?: string): string {
    return this.format(TelegramMessageType.SUCCESS, {
      title: title || '–£—Å–ø–µ—à–Ω–æ',
      content,
      footer,
      parseMode: 'Markdown',
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
   * @param title –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param footer –ü–æ–¥–≤–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
   */
  formatWarning(content: string, title?: string, footer?: string): string {
    return this.format(TelegramMessageType.WARNING, {
      title: title || '–í–Ω–∏–º–∞–Ω–∏–µ',
      content,
      footer,
      parseMode: 'Markdown',
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
   * @param title –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param footer –ü–æ–¥–≤–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  formatError(content: string, title?: string, footer?: string): string {
    return this.format(TelegramMessageType.ERROR, {
      title: title || '–û—à–∏–±–∫–∞',
      content,
      footer,
      parseMode: 'Markdown',
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param character –ü–µ—Ä—Å–æ–Ω–∞–∂
   * @param content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param emotionalState –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  formatCharacterMessage(character: Character, content: string, emotionalState?: string): string {
    let message = content;

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ
    if (emotionalState) {
      message = `_${emotionalState}_\n\n${message}`;
    }

    return this.format(TelegramMessageType.CHARACTER_MESSAGE, {
      title: character.name,
      content: message,
      parseMode: 'Markdown',
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  formatSystemMessage(content: string): string {
    return this.format(TelegramMessageType.SYSTEM, {
      title: '–°–∏—Å—Ç–µ–º–∞',
      content,
      parseMode: 'Markdown',
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  @Retry()
  async formatHelpMessage(): Promise<string> {
    return this.withErrorHandling('—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', async () => {
      let message = `*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n`;

      message += `üé≠ *–ü–µ—Ä—Å–æ–Ω–∞–∂–∏*\n`;
      message += `‚Ä¢ /characters - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n`;
      message += `‚Ä¢ /create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n`;
      message += `‚Ä¢ /archive - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n\n`;

      message += `üí¨ *–û–±—â–µ–Ω–∏–µ*\n`;
      message += `‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º\n`;
      message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n`;

      message += `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n`;
      message += `‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n`;
      message += `‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n`;

      message += `_–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É._`;

      return message;
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
   */
  async formatCharacterInfo(character: CharacterMetadata): Promise<string> {
    return this.withErrorHandling('—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ', async () => {
      let message = `üé≠ *${character.name}*\n\n`;

      if (character.description) {
        message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${character.description}\n\n`;
      }

      message += `üìÖ *–°–æ–∑–¥–∞–Ω:* ${character.createdAt.toLocaleDateString('ru-RU')}\n`;
      message += `üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω:* ${character.updatedAt.toLocaleDateString('ru-RU')}\n`;

      if (character.isArchived) {
        message += `\nüì¶ *–°—Ç–∞—Ç—É—Å:* –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω`;
      }

      return message;
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
   */
  async formatNewCharacterInfo(character: CharacterMetadata): Promise<string> {
    return this.withErrorHandling('—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ', async () => {
      let message = `üéâ *–ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!*\n\n`;
      message += `üé≠ *–ò–º—è:* ${character.name}\n`;

      if (character.description) {
        message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${character.description}\n`;
      }

      message += `\n‚ú® –ü–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é!`;

      return message;
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   */
  async formatCharacterList(characters: CharacterMetadata[]): Promise<string> {
    return this.withErrorHandling('—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π', async () => {
      if (characters.length === 0) {
        return `üé≠ *–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`;
      }

      let message = `üé≠ *–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏* (${characters.length})\n\n`;

      characters.forEach(character => {
        const status = character.isArchived ? 'üì¶' : '‚ú®';
        message += `${status} *${character.name}*\n`;
        if (character.description) {
          const shortDesc =
            character.description.length > 50
              ? character.description.substring(0, 50) + '...'
              : character.description;
          message += `   _${shortDesc}_\n`;
        }
        message += `\n`;
      });

      return message;
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  async formatCharacterStatus(character: CharacterMetadata, status: string): Promise<string> {
    return this.withErrorHandling('—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', async () => {
      let message = `üé≠ *${character.name}*\n\n`;
      message += `üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:* ${this.formatStatus(status)}\n`;

      const statusEmoji = this.getStatusEmoji(status);
      if (statusEmoji) {
        message = `${statusEmoji} ${message}`;
      }

      return message;
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
   */
  async formatActionProgress(
    characterName: string,
    action: {
      name: string;
      description: string;
      id: string;
      duration?: number;
    },
    progress: {
      percentage: number;
      status: string;
      timeRemaining?: number;
      message?: string;
    },
  ): Promise<string> {
    return this.withErrorHandling('—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–µ–π—Å—Ç–≤–∏—è', async () => {
      let message = `üé≠ *${characterName}*\n\n`;
      message += `‚ö° *–î–µ–π—Å—Ç–≤–∏–µ:* ${action.name}\n`;

      if (action.description) {
        message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${action.description}\n`;
      }

      // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
      const progressBar = this.createProgressBar(progress.percentage);
      message += `\nüìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:* ${progress.percentage}%\n${progressBar}\n`;

      message += `üìà *–°—Ç–∞—Ç—É—Å:* ${this.formatStatus(progress.status)}\n`;

      if (progress.timeRemaining) {
        const minutes = Math.ceil(progress.timeRemaining / 60);
        message += `‚è±Ô∏è *–û—Å—Ç–∞–ª–æ—Å—å:* ~${minutes} –º–∏–Ω.\n`;
      }

      if (progress.message) {
        message += `\nüí¨ ${progress.message}`;
      }

      return message;
    });
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  private getStatusEmoji(status: string): string {
    const statusEmojis: Record<string, string> = {
      active: 'üü¢',
      inactive: 'üî¥',
      busy: 'üü°',
      sleeping: 'üò¥',
      thinking: 'ü§î',
      talking: 'üí¨',
      working: '‚ö°',
      resting: 'üòå',
    };

    return statusEmojis[status.toLowerCase()] || '‚ö™';
  }

  private formatStatus(status: string): string {
    const statusTranslations: Record<string, string> = {
      active: '–ê–∫—Ç–∏–≤–µ–Ω',
      inactive: '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
      busy: '–ó–∞–Ω—è—Ç',
      sleeping: '–°–ø–∏—Ç',
      thinking: '–î—É–º–∞–µ—Ç',
      talking: '–†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç',
      working: '–†–∞–±–æ—Ç–∞–µ—Ç',
      resting: '–û—Ç–¥—ã—Ö–∞–µ—Ç',
    };

    return statusTranslations[status.toLowerCase()] || status;
  }

  private createProgressBar(percentage: number): string {
    const totalBars = 10;
    const filledBars = Math.round((percentage / 100) * totalBars);
    const emptyBars = totalBars - filledBars;

    return '‚ñà'.repeat(filledBars) + '‚ñë'.repeat(emptyBars);
  }

  private truncateText(text: string): string {
    if (text.length <= this.maxMessageLength) {
      return text;
    }

    return text.substring(0, this.maxMessageLength - 3) + '...';
  }
}
